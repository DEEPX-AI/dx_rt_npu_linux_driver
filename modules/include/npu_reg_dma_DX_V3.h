// SPDX-License-Identifier: GPL-2.0
/*
 * Deepx Runtime Driver
 *
 * Copyright (C) 2023 Deepx, Inc.
 *
 */
#ifndef __NPU_REG_DMA_DX_V3_H
#define __NPU_REG_DMA_DX_V3_H

#include <linux/types.h>

/* Address */
#define REG_DMA_OFFSET 0x10000
#define REG_DMA_AXI_BASE_ADDR_LOW    (REG_DMA_OFFSET + 0x00000000) /* 0 */
#define REG_DMA_AXI_BASE_ADDR_HIGH    (REG_DMA_OFFSET + 0x00000004) /* 4 */
#define REG_DMA_AXI_RDMA_BLEN    (REG_DMA_OFFSET + 0x00000008) /* 8 */
#define REG_DMA_AXI_WDMA_BLEN    (REG_DMA_OFFSET + 0x0000000c) /* 12 */
#define REG_DMA_AXI_RDMA_MO    (REG_DMA_OFFSET + 0x00000010) /* 16 */
#define REG_DMA_AXI_WDMA_MO    (REG_DMA_OFFSET + 0x00000014) /* 20 */
#define REG_DMA_AXI_4KB_BOUNDARY    (REG_DMA_OFFSET + 0x00000018) /* 24 */
#define REG_DMA_AXI_RDMA_QOS    (REG_DMA_OFFSET + 0x0000001c) /* 28 */
#define REG_DMA_AXI_WDMA_QOS    (REG_DMA_OFFSET + 0x00000020) /* 32 */
#define REG_DMA_SFR_BASE_ADDR_LOW    (REG_DMA_OFFSET + 0x00000024) /* 36 */
#define REG_DMA_SFR_BASE_ADDR_HIGH    (REG_DMA_OFFSET + 0x00000028) /* 40 */
#define REG_DMA_SFR_START_ADDR    (REG_DMA_OFFSET + 0x0000002c) /* 44 */
#define REG_DMA_SFR_ADDR_OFFS    (REG_DMA_OFFSET + 0x00000030) /* 48 */
#define REG_DMA_HALT_CMD    (REG_DMA_OFFSET + 0x00000034) /* 52 */
#define REG_DMA_HALT_STATUS    (REG_DMA_OFFSET + 0x00000038) /* 56 */
#define REG_DMA_USR_MODE_EN    (REG_DMA_OFFSET + 0x0000003c) /* 60 */
#define REG_DMA_USR_DMA_AXI_RADDR    (REG_DMA_OFFSET + 0x00000040) /* 64 */
#define REG_DMA_USR_DMA_AXI_WADDR    (REG_DMA_OFFSET + 0x00000044) /* 68 */
#define REG_DMA_USR_DMA_SRAM_RADDR    (REG_DMA_OFFSET + 0x00000048) /* 72 */
#define REG_DMA_USR_DMA_SRAM_WADDR    (REG_DMA_OFFSET + 0x0000004c) /* 76 */
#define REG_DMA_USR_DMA_RSIZE    (REG_DMA_OFFSET + 0x00000050) /* 80 */
#define REG_DMA_USR_DMA_WSIZE    (REG_DMA_OFFSET + 0x00000054) /* 84 */
#define REG_DMA_USR_SFR_ID    (REG_DMA_OFFSET + 0x00000058) /* 88 */
#define REG_DMA_USR_DMA_CMD    (REG_DMA_OFFSET + 0x0000005c) /* 92 */
#define REG_DMA_USR_DMA_STATUS    (REG_DMA_OFFSET + 0x00000060) /* 96 */
#define REG_DMA_VIRT_RD_INFO    (REG_DMA_OFFSET + 0x00000064) /* 100 */
#define REG_DMA_VIRT_RD_SEED    (REG_DMA_OFFSET + 0x00000068) /* 104 */
#define REG_DMA_VIRT_RD_PTRN    (REG_DMA_OFFSET + 0x0000006c) /* 108 */

/* Register Definition */
typedef volatile union _DMA_AXI_BASE_ADDR_LOW_t
{
    volatile uint32_t U;  /* Register-Access : DMA.AXI_BASE_ADDR_LOW*/
    struct {     /* Register-Bitfields-Access */
        volatile uint32_t AXI_BASE_ADDR_LOW:32;  /* DMA.AXI_BASE_ADDR_LOW.AXI_BASE_ADDR_LOW [31:0] (RW, 0x0) AXI4 BASE ADDRESS LOW 32BIT */
    };
} DMA_AXI_BASE_ADDR_LOW_t;
typedef volatile union _DMA_AXI_BASE_ADDR_HIGH_t
{
    volatile uint32_t U;  /* Register-Access : DMA.AXI_BASE_ADDR_HIGH*/
    struct {     /* Register-Bitfields-Access */
        volatile uint32_t AXI_BASE_ADDR_HIGH:32;  /* DMA.AXI_BASE_ADDR_HIGH.AXI_BASE_ADDR_HIGH [31:0] (RW, 0x0) AXI4 BASE ADDRESS HIGH 32BIT */
    };
} DMA_AXI_BASE_ADDR_HIGH_t;
typedef volatile union _DMA_AXI_RDMA_BLEN_t
{
    volatile uint32_t U;  /* Register-Access : DMA.AXI_RDMA_BLEN*/
    struct {     /* Register-Bitfields-Access */
        volatile uint32_t AXI_RDMA_BLEN:9;  /* DMA.AXI_RDMA_BLEN.AXI_RDMA_BLEN [8:0] (RW, 0x80) AXI READ BURST LENGTH */
        volatile uint32_t RESERVED0:23;  /* DMA.AXI_RDMA_BLEN.RESERVED0 [31:9] (R, 0x0)  */
    };
} DMA_AXI_RDMA_BLEN_t;
typedef volatile union _DMA_AXI_WDMA_BLEN_t
{
    volatile uint32_t U;  /* Register-Access : DMA.AXI_WDMA_BLEN*/
    struct {     /* Register-Bitfields-Access */
        volatile uint32_t AXI_WDMA_BLEN:9;  /* DMA.AXI_WDMA_BLEN.AXI_WDMA_BLEN [8:0] (RW, 0x80) AXI WRITE BURST LENGTH */
        volatile uint32_t RESERVED0:23;  /* DMA.AXI_WDMA_BLEN.RESERVED0 [31:9] (R, 0x0)  */
    };
} DMA_AXI_WDMA_BLEN_t;
typedef volatile union _DMA_AXI_RDMA_MO_t
{
    volatile uint32_t U;  /* Register-Access : DMA.AXI_RDMA_MO*/
    struct {     /* Register-Bitfields-Access */
        volatile uint32_t AXI_RDMA_MO:4;  /* DMA.AXI_RDMA_MO.AXI_RDMA_MO [3:0] (RW, 0xf) AXI READ MUTI-OUTSTANDING NUMBER */
        volatile uint32_t RESERVED0:28;  /* DMA.AXI_RDMA_MO.RESERVED0 [31:4] (R, 0x0)  */
    };
} DMA_AXI_RDMA_MO_t;
typedef volatile union _DMA_AXI_WDMA_MO_t
{
    volatile uint32_t U;  /* Register-Access : DMA.AXI_WDMA_MO*/
    struct {     /* Register-Bitfields-Access */
        volatile uint32_t AXI_WDMA_MO:4;  /* DMA.AXI_WDMA_MO.AXI_WDMA_MO [3:0] (RW, 0xf) AXI WRITE MULTI-OUTSTANDING NUMBER */
        volatile uint32_t RESERVED0:28;  /* DMA.AXI_WDMA_MO.RESERVED0 [31:4] (R, 0x0)  */
    };
} DMA_AXI_WDMA_MO_t;
typedef volatile union _DMA_AXI_4KB_BOUNDARY_t
{
    volatile uint32_t U;  /* Register-Access : DMA.AXI_4KB_BOUNDARY*/
    struct {     /* Register-Bitfields-Access */
        volatile uint32_t AXI_4KB_BOUNDARY:1;  /* DMA.AXI_4KB_BOUNDARY.AXI_4KB_BOUNDARY [0:0] (RW, 0x1) 4KB BOUNDARY PROCESS. ‘0’ : OFF , ‘1’ : ON */
        volatile uint32_t RESERVED0:31;  /* DMA.AXI_4KB_BOUNDARY.RESERVED0 [31:1] (R, 0x0)  */
    };
} DMA_AXI_4KB_BOUNDARY_t;
typedef volatile union _DMA_AXI_RDMA_QOS_t
{
    volatile uint32_t U;  /* Register-Access : DMA.AXI_RDMA_QOS*/
    struct {     /* Register-Bitfields-Access */
        volatile uint32_t AXI_RDMA_QOS_LOW:4;  /* DMA.AXI_RDMA_QOS.AXI_RDMA_QOS_LOW [3:0] (RW, 0x0) AXI READ QUALITY OF SERVICE */
        volatile uint32_t AXI_RDMA_QOS_MEDIUM:4;  /* DMA.AXI_RDMA_QOS.AXI_RDMA_QOS_MEDIUM [7:4] (RW, 0x0) AXI READ QUALITY OF SERVICE */
        volatile uint32_t AXI_RDMA_QOS_HIGH:4;  /* DMA.AXI_RDMA_QOS.AXI_RDMA_QOS_HIGH [11:8] (RW, 0x0) AXI READ QUALITY OF SERVICE */
        volatile uint32_t RESERVED0:20;  /* DMA.AXI_RDMA_QOS.RESERVED0 [31:12] (R, 0x0)  */
    };
} DMA_AXI_RDMA_QOS_t;
typedef volatile union _DMA_AXI_WDMA_QOS_t
{
    volatile uint32_t U;  /* Register-Access : DMA.AXI_WDMA_QOS*/
    struct {     /* Register-Bitfields-Access */
        volatile uint32_t AXI_WDMA_QOS_LOW:4;  /* DMA.AXI_WDMA_QOS.AXI_WDMA_QOS_LOW [3:0] (RW, 0x0) AXI WRITE QUALITY OF SERVICE */
        volatile uint32_t AXI_WDMA_QOS_MEDIUM:4;  /* DMA.AXI_WDMA_QOS.AXI_WDMA_QOS_MEDIUM [7:4] (RW, 0x0) AXI WRITE QUALITY OF SERVICE */
        volatile uint32_t AXI_WDMA_QOS_HIGH:4;  /* DMA.AXI_WDMA_QOS.AXI_WDMA_QOS_HIGH [11:8] (RW, 0x0) AXI WRITE QUALITY OF SERVICE */
        volatile uint32_t RESERVED0:20;  /* DMA.AXI_WDMA_QOS.RESERVED0 [31:12] (R, 0x0)  */
    };
} DMA_AXI_WDMA_QOS_t;
typedef volatile union _DMA_SFR_BASE_ADDR_LOW_t
{
    volatile uint32_t U;  /* Register-Access : DMA.SFR_BASE_ADDR_LOW*/
    struct {     /* Register-Bitfields-Access */
        volatile uint32_t SFR_BASE_ADDR_LOW:32;  /* DMA.SFR_BASE_ADDR_LOW.SFR_BASE_ADDR_LOW [31:0] (RW, 0x0) SFR BASE AXI4 ADDRESS LOW 32BIT */
    };
} DMA_SFR_BASE_ADDR_LOW_t;
typedef volatile union _DMA_SFR_BASE_ADDR_HIGH_t
{
    volatile uint32_t U;  /* Register-Access : DMA.SFR_BASE_ADDR_HIGH*/
    struct {     /* Register-Bitfields-Access */
        volatile uint32_t SFR_BASE_ADDR_HIGH:32;  /* DMA.SFR_BASE_ADDR_HIGH.SFR_BASE_ADDR_HIGH [31:0] (RW, 0x0) SFR BASE AXI4 ADDRESS HIGH 32BIT */
    };
} DMA_SFR_BASE_ADDR_HIGH_t;
typedef volatile union _DMA_SFR_START_ADDR_t
{
    volatile uint32_t U;  /* Register-Access : DMA.SFR_START_ADDR*/
    struct {     /* Register-Bitfields-Access */
        volatile uint32_t SFR_START_ADDR:16;  /* DMA.SFR_START_ADDR.SFR_START_ADDR [15:0] (RW, 0x0) SFR WRITE START NPU ADDRESS */
        volatile uint32_t RESERVED0:16;  /* DMA.SFR_START_ADDR.RESERVED0 [31:16] (R, 0x0)  */
    };
} DMA_SFR_START_ADDR_t;
typedef volatile union _DMA_SFR_ADDR_OFFS_t
{
    volatile uint32_t U;  /* Register-Access : DMA.SFR_ADDR_OFFS*/
    struct {     /* Register-Bitfields-Access */
        volatile uint32_t SFR_ADDR_OFFS:14;  /* DMA.SFR_ADDR_OFFS.SFR_ADDR_OFFS [13:0] (RW, 0x0)  */
        volatile uint32_t RESERVED0:18;  /* DMA.SFR_ADDR_OFFS.RESERVED0 [31:14] (R, 0x0) RMAP PER TILE SIZE CEILLING WITH AXI BUS WIDTH. SFR_ADDR_OFFS = CEIL(RMAP SIZE PER TILE / AXI_DW) * AXI_DW */
    };
} DMA_SFR_ADDR_OFFS_t;
typedef volatile union _DMA_HALT_CMD_t
{
    volatile uint32_t U;  /* Register-Access : DMA.HALT_CMD*/
    struct {     /* Register-Bitfields-Access */
        volatile uint32_t HALT_EN:1;  /* DMA.HALT_CMD.HALT_EN [0:0] (RW, 0x0) FLUSH DMA COMMAND. LEVEL TRIGGERED. NOT CLEARED AUTOMATICALLY */
        volatile uint32_t RESERVED0:31;  /* DMA.HALT_CMD.RESERVED0 [31:1] (R, 0x0)  */
    };
} DMA_HALT_CMD_t;
typedef volatile union _DMA_HALT_STATUS_t
{
    volatile uint32_t U;  /* Register-Access : DMA.HALT_STATUS*/
    struct {     /* Register-Bitfields-Access */
        volatile uint32_t HALT_DONE:1;  /* DMA.HALT_STATUS.HALT_DONE [0:0] (R, 0x0) NPU DMA FLUSH DONE. TO CLEAR, SET FLUSH_EN 0 AFTER FLUSH DONE. */
        volatile uint32_t RESERVED0:31;  /* DMA.HALT_STATUS.RESERVED0 [31:1] (R, 0x0)  */
    };
} DMA_HALT_STATUS_t;
typedef volatile union _DMA_USR_MODE_EN_t
{
    volatile uint32_t U;  /* Register-Access : DMA.USR_MODE_EN*/
    struct {     /* Register-Bitfields-Access */
        volatile uint32_t USR_MODE_EN:1;  /* DMA.USR_MODE_EN.USR_MODE_EN [0:0] (RW, 0x0) ENABLED USR_DMA OR USR_SFR */
        volatile uint32_t RESERVED0:31;  /* DMA.USR_MODE_EN.RESERVED0 [31:1] (R, 0x0)  */
    };
} DMA_USR_MODE_EN_t;
typedef volatile union _DMA_USR_DMA_AXI_RADDR_t
{
    volatile uint32_t U;  /* Register-Access : DMA.USR_DMA_AXI_RADDR*/
    struct {     /* Register-Bitfields-Access */
        volatile uint32_t USR_DMA_AXI_RADDR:32;  /* DMA.USR_DMA_AXI_RADDR.USR_DMA_AXI_RADDR [31:0] (RW, 0x0) USR_DMA AXI SRC ADDRESS */
    };
} DMA_USR_DMA_AXI_RADDR_t;
typedef volatile union _DMA_USR_DMA_AXI_WADDR_t
{
    volatile uint32_t U;  /* Register-Access : DMA.USR_DMA_AXI_WADDR*/
    struct {     /* Register-Bitfields-Access */
        volatile uint32_t USR_DMA_AXI_WADDR:32;  /* DMA.USR_DMA_AXI_WADDR.USR_DMA_AXI_WADDR [31:0] (RW, 0x0) USR_DMA AXI DST ADDRESS */
    };
} DMA_USR_DMA_AXI_WADDR_t;
typedef volatile union _DMA_USR_DMA_SRAM_RADDR_t
{
    volatile uint32_t U;  /* Register-Access : DMA.USR_DMA_SRAM_RADDR*/
    struct {     /* Register-Bitfields-Access */
        volatile uint32_t USR_DMA_SRAM_RADDR:32;  /* DMA.USR_DMA_SRAM_RADDR.USR_DMA_SRAM_RADDR [31:0] (RW, 0x0) USR_DMA NPU MEM SRC ADDR */
    };
} DMA_USR_DMA_SRAM_RADDR_t;
typedef volatile union _DMA_USR_DMA_SRAM_WADDR_t
{
    volatile uint32_t U;  /* Register-Access : DMA.USR_DMA_SRAM_WADDR*/
    struct {     /* Register-Bitfields-Access */
        volatile uint32_t USR_DMA_SRAM_WADDR:32;  /* DMA.USR_DMA_SRAM_WADDR.USR_DMA_SRAM_WADDR [31:0] (RW, 0x0) USR_DMA NPU MEM DST ADDR */
    };
} DMA_USR_DMA_SRAM_WADDR_t;
typedef volatile union _DMA_USR_DMA_RSIZE_t
{
    volatile uint32_t U;  /* Register-Access : DMA.USR_DMA_RSIZE*/
    struct {     /* Register-Bitfields-Access */
        volatile uint32_t USR_DMA_RSIZE:22;  /* DMA.USR_DMA_RSIZE.USR_DMA_RSIZE [21:0] (RW, 0x0) USR_DMA READ TRANSACTION SIZE. USED FOR RDMA OR CDMA */
        volatile uint32_t RESERVED0:10;  /* DMA.USR_DMA_RSIZE.RESERVED0 [31:22] (R, 0x0)  */
    };
} DMA_USR_DMA_RSIZE_t;
typedef volatile union _DMA_USR_DMA_WSIZE_t
{
    volatile uint32_t U;  /* Register-Access : DMA.USR_DMA_WSIZE*/
    struct {     /* Register-Bitfields-Access */
        volatile uint32_t USR_DMA_WSIZE:22;  /* DMA.USR_DMA_WSIZE.USR_DMA_WSIZE [21:0] (RW, 0x0) USR_DMA WRITE TRANSACTION SIZE. USED FOR WDMA */
        volatile uint32_t RESERVED0:10;  /* DMA.USR_DMA_WSIZE.RESERVED0 [31:22] (R, 0x0)  */
    };
} DMA_USR_DMA_WSIZE_t;
typedef volatile union _DMA_USR_SFR_ID_t
{
    volatile uint32_t U;  /* Register-Access : DMA.USR_SFR_ID*/
    struct {     /* Register-Bitfields-Access */
        volatile uint32_t USR_SFR_ID:18;  /* DMA.USR_SFR_ID.USR_SFR_ID [17:0] (RW, 0x0) TILE TO START USR_SFR */
        volatile uint32_t RESERVED0:14;  /* DMA.USR_SFR_ID.RESERVED0 [31:18] (R, 0x0)  */
    };
} DMA_USR_SFR_ID_t;
typedef volatile union _DMA_USR_DMA_CMD_t
{
    volatile uint32_t U;  /* Register-Access : DMA.USR_DMA_CMD*/
    struct {     /* Register-Bitfields-Access */
        volatile uint32_t USR_RDMA_START:1;  /* DMA.USR_DMA_CMD.USR_RDMA_START [0:0] (W, 0x0) RDMA START WITH USR_DMA. AUTO CLEARED. */
        volatile uint32_t USR_WDMA_START:1;  /* DMA.USR_DMA_CMD.USR_WDMA_START [1:1] (W, 0x0) WDMA START WITH USR_DMA. AUTO CLEARED. */
        volatile uint32_t USR_CDMA_START:1;  /* DMA.USR_DMA_CMD.USR_CDMA_START [2:2] (W, 0x0) CDMA START WITH USR_DMA. AUTO CLEARED. */
        volatile uint32_t USR_SFR_START:1;  /* DMA.USR_DMA_CMD.USR_SFR_START [3:3] (W, 0x0) SET RMAP MANUALLY WITH USR_SFR. AUTO CLEARED. */
        volatile uint32_t RESERVED0:28;  /* DMA.USR_DMA_CMD.RESERVED0 [31:4] (R, 0x0)  */
    };
} DMA_USR_DMA_CMD_t;
typedef volatile union _DMA_USR_DMA_STATUS_t
{
    volatile uint32_t U;  /* Register-Access : DMA.USR_DMA_STATUS*/
    struct {     /* Register-Bitfields-Access */
        volatile uint32_t USR_RDMA_DONE:1;  /* DMA.USR_DMA_STATUS.USR_RDMA_DONE [0:0] (R, 0x0) W1C, USR_RDMA DONE STATUS */
        volatile uint32_t USR_WDMA_DONE:1;  /* DMA.USR_DMA_STATUS.USR_WDMA_DONE [1:1] (R, 0x0) W1C, USR_WDMA DONE STATUS */
        volatile uint32_t USR_CDMA_DONE:1;  /* DMA.USR_DMA_STATUS.USR_CDMA_DONE [2:2] (R, 0x0) W1C, USR_CDMA DONE STATUS */
        volatile uint32_t USR_SFR_DONE:1;  /* DMA.USR_DMA_STATUS.USR_SFR_DONE [3:3] (R, 0x0) W1C, USR_SFR DONE STATUS */
        volatile uint32_t RESERVED0:28;  /* DMA.USR_DMA_STATUS.RESERVED0 [31:4] (R, 0x0)  */
    };
} DMA_USR_DMA_STATUS_t;
typedef volatile union _DMA_VIRT_RD_INFO_t
{
    volatile uint32_t U;  /* Register-Access : DMA.VIRT_RD_INFO*/
    struct {     /* Register-Bitfields-Access */
        volatile uint32_t VIRT_RD_EN:1;  /* DMA.VIRT_RD_INFO.VIRT_RD_EN [0:0] (RW, 0x0) READ AXI DATA FROM INTERNAL REGISTER FOR BIST */
        volatile uint32_t VIRT_RD_MODE:1;  /* DMA.VIRT_RD_INFO.VIRT_RD_MODE [1:1] (RW, 0x0) IF 0, RANDOM VIRTUAL READ MODE. ELSE, VIRTUAL PATTERN MODE */
        volatile uint32_t RESERVED0:30;  /* DMA.VIRT_RD_INFO.RESERVED0 [31:2] (R, 0x0)  */
    };
} DMA_VIRT_RD_INFO_t;
typedef volatile union _DMA_VIRT_RD_SEED_t
{
    volatile uint32_t U;  /* Register-Access : DMA.VIRT_RD_SEED*/
    struct {     /* Register-Bitfields-Access */
        volatile uint32_t VIRT_RD_SEED:8;  /* DMA.VIRT_RD_SEED.VIRT_RD_SEED [7:0] (RW, 0x1) VIRTUAL READ GALOIS LFSR INIT SEED */
        volatile uint32_t RESERVED0:24;  /* DMA.VIRT_RD_SEED.RESERVED0 [31:8] (R, 0x0)  */
    };
} DMA_VIRT_RD_SEED_t;
typedef volatile union _DMA_VIRT_RD_PTRN_t
{
    volatile uint32_t U;  /* Register-Access : DMA.VIRT_RD_PTRN*/
    struct {     /* Register-Bitfields-Access */
        volatile uint32_t VIRT_RD_PTRN:8;  /* DMA.VIRT_RD_PTRN.VIRT_RD_PTRN [7:0] (RW, 0x0) VIRTUAL READ PATTERN */
        volatile uint32_t RESERVED0:24;  /* DMA.VIRT_RD_PTRN.RESERVED0 [31:8] (R, 0x0)  */
    };
} DMA_VIRT_RD_PTRN_t;

/* DMA Module Definition */
typedef volatile struct _dxDMA_t
{
    DMA_AXI_BASE_ADDR_LOW_t AXI_BASE_ADDR_LOW;  /* DMA 0x0 */
    DMA_AXI_BASE_ADDR_HIGH_t AXI_BASE_ADDR_HIGH;  /* DMA 0x4 */
    DMA_AXI_RDMA_BLEN_t AXI_RDMA_BLEN;  /* DMA 0x8 */
    DMA_AXI_WDMA_BLEN_t AXI_WDMA_BLEN;  /* DMA 0xc */
    DMA_AXI_RDMA_MO_t AXI_RDMA_MO;  /* DMA 0x10 */
    DMA_AXI_WDMA_MO_t AXI_WDMA_MO;  /* DMA 0x14 */
    DMA_AXI_4KB_BOUNDARY_t AXI_4KB_BOUNDARY;  /* DMA 0x18 */
    DMA_AXI_RDMA_QOS_t AXI_RDMA_QOS;  /* DMA 0x1c */
    DMA_AXI_WDMA_QOS_t AXI_WDMA_QOS;  /* DMA 0x20 */
    DMA_SFR_BASE_ADDR_LOW_t SFR_BASE_ADDR_LOW;  /* DMA 0x24 */
    DMA_SFR_BASE_ADDR_HIGH_t SFR_BASE_ADDR_HIGH;  /* DMA 0x28 */
    DMA_SFR_START_ADDR_t SFR_START_ADDR;  /* DMA 0x2c */
    DMA_SFR_ADDR_OFFS_t SFR_ADDR_OFFS;  /* DMA 0x30 */
    DMA_HALT_CMD_t HALT_CMD;  /* DMA 0x34 */
    DMA_HALT_STATUS_t HALT_STATUS;  /* DMA 0x38 */
    DMA_USR_MODE_EN_t USR_MODE_EN;  /* DMA 0x3c */
    DMA_USR_DMA_AXI_RADDR_t USR_DMA_AXI_RADDR;  /* DMA 0x40 */
    DMA_USR_DMA_AXI_WADDR_t USR_DMA_AXI_WADDR;  /* DMA 0x44 */
    DMA_USR_DMA_SRAM_RADDR_t USR_DMA_SRAM_RADDR;  /* DMA 0x48 */
    DMA_USR_DMA_SRAM_WADDR_t USR_DMA_SRAM_WADDR;  /* DMA 0x4c */
    DMA_USR_DMA_RSIZE_t USR_DMA_RSIZE;  /* DMA 0x50 */
    DMA_USR_DMA_WSIZE_t USR_DMA_WSIZE;  /* DMA 0x54 */
    DMA_USR_SFR_ID_t USR_SFR_ID;  /* DMA 0x58 */
    DMA_USR_DMA_CMD_t USR_DMA_CMD;  /* DMA 0x5c */
    DMA_USR_DMA_STATUS_t USR_DMA_STATUS;  /* DMA 0x60 */
    DMA_VIRT_RD_INFO_t VIRT_RD_INFO;  /* DMA 0x64 */
    DMA_VIRT_RD_SEED_t VIRT_RD_SEED;  /* DMA 0x68 */
    DMA_VIRT_RD_PTRN_t VIRT_RD_PTRN;  /* DMA 0x6c */
} dxDMA_t;

/* Register access API */
/* DMA.AXI_BASE_ADDR_LOW (Category: DMA) */
#define READ_DMA_AXI_BASE_ADDR_LOW(base) npu_reg_read(base, REG_DMA_AXI_BASE_ADDR_LOW)
#define WRITE_DMA_AXI_BASE_ADDR_LOW(base, val) npu_reg_write(base, REG_DMA_AXI_BASE_ADDR_LOW, val)
/* DMA.AXI_BASE_ADDR_LOW.AXI_BASE_ADDR_LOW (Category: DMA) */
#define DMA_AXI_BASE_ADDR_LOW_AXI_BASE_ADDR_LOW_LEN        32
#define DMA_AXI_BASE_ADDR_LOW_AXI_BASE_ADDR_LOW_OFFSET     0
#define DMA_AXI_BASE_ADDR_LOW_AXI_BASE_ADDR_LOW_MASK_BITS  0xffffffff /* [31:0] 0b11111111111111111111111111111111 */
#define DMA_AXI_BASE_ADDR_LOW_AXI_BASE_ADDR_LOW_MASK       0xffffffff /* [31:0] 0b11111111111111111111111111111111 */

#define READ_DMA_AXI_BASE_ADDR_LOW_AXI_BASE_ADDR_LOW(base) \
    npu_reg_read_mask(base, REG_DMA_AXI_BASE_ADDR_LOW, DMA_AXI_BASE_ADDR_LOW_AXI_BASE_ADDR_LOW_MASK, DMA_AXI_BASE_ADDR_LOW_AXI_BASE_ADDR_LOW_OFFSET)
#define WRITE_DMA_AXI_BASE_ADDR_LOW_AXI_BASE_ADDR_LOW(base, val) \
    npu_reg_write_mask(base, REG_DMA_AXI_BASE_ADDR_LOW, val, DMA_AXI_BASE_ADDR_LOW_AXI_BASE_ADDR_LOW_MASK, DMA_AXI_BASE_ADDR_LOW_AXI_BASE_ADDR_LOW_OFFSET)

/* DMA.AXI_BASE_ADDR_HIGH (Category: DMA) */
#define READ_DMA_AXI_BASE_ADDR_HIGH(base) npu_reg_read(base, REG_DMA_AXI_BASE_ADDR_HIGH)
#define WRITE_DMA_AXI_BASE_ADDR_HIGH(base, val) npu_reg_write(base, REG_DMA_AXI_BASE_ADDR_HIGH, val)
/* DMA.AXI_BASE_ADDR_HIGH.AXI_BASE_ADDR_HIGH (Category: DMA) */
#define DMA_AXI_BASE_ADDR_HIGH_AXI_BASE_ADDR_HIGH_LEN        32
#define DMA_AXI_BASE_ADDR_HIGH_AXI_BASE_ADDR_HIGH_OFFSET     0
#define DMA_AXI_BASE_ADDR_HIGH_AXI_BASE_ADDR_HIGH_MASK_BITS  0xffffffff /* [31:0] 0b11111111111111111111111111111111 */
#define DMA_AXI_BASE_ADDR_HIGH_AXI_BASE_ADDR_HIGH_MASK       0xffffffff /* [31:0] 0b11111111111111111111111111111111 */

#define READ_DMA_AXI_BASE_ADDR_HIGH_AXI_BASE_ADDR_HIGH(base) \
    npu_reg_read_mask(base, REG_DMA_AXI_BASE_ADDR_HIGH, DMA_AXI_BASE_ADDR_HIGH_AXI_BASE_ADDR_HIGH_MASK, DMA_AXI_BASE_ADDR_HIGH_AXI_BASE_ADDR_HIGH_OFFSET)
#define WRITE_DMA_AXI_BASE_ADDR_HIGH_AXI_BASE_ADDR_HIGH(base, val) \
    npu_reg_write_mask(base, REG_DMA_AXI_BASE_ADDR_HIGH, val, DMA_AXI_BASE_ADDR_HIGH_AXI_BASE_ADDR_HIGH_MASK, DMA_AXI_BASE_ADDR_HIGH_AXI_BASE_ADDR_HIGH_OFFSET)

/* DMA.AXI_RDMA_BLEN (Category: DMA) */
#define READ_DMA_AXI_RDMA_BLEN(base) npu_reg_read(base, REG_DMA_AXI_RDMA_BLEN)
#define WRITE_DMA_AXI_RDMA_BLEN(base, val) npu_reg_write(base, REG_DMA_AXI_RDMA_BLEN, val)
/* DMA.AXI_RDMA_BLEN.AXI_RDMA_BLEN (Category: DMA) */
#define DMA_AXI_RDMA_BLEN_AXI_RDMA_BLEN_LEN        9
#define DMA_AXI_RDMA_BLEN_AXI_RDMA_BLEN_OFFSET     0
#define DMA_AXI_RDMA_BLEN_AXI_RDMA_BLEN_MASK_BITS  0x000001ff /* [8:0] 0b00000000000000000000000111111111 */
#define DMA_AXI_RDMA_BLEN_AXI_RDMA_BLEN_MASK       0x000001ff /* [8:0] 0b00000000000000000000000111111111 */

#define READ_DMA_AXI_RDMA_BLEN_AXI_RDMA_BLEN(base) \
    npu_reg_read_mask(base, REG_DMA_AXI_RDMA_BLEN, DMA_AXI_RDMA_BLEN_AXI_RDMA_BLEN_MASK, DMA_AXI_RDMA_BLEN_AXI_RDMA_BLEN_OFFSET)
#define WRITE_DMA_AXI_RDMA_BLEN_AXI_RDMA_BLEN(base, val) \
    npu_reg_write_mask(base, REG_DMA_AXI_RDMA_BLEN, val, DMA_AXI_RDMA_BLEN_AXI_RDMA_BLEN_MASK, DMA_AXI_RDMA_BLEN_AXI_RDMA_BLEN_OFFSET)

/* DMA.AXI_RDMA_BLEN.RESERVED0 (Category: DMA) */
#define DMA_AXI_RDMA_BLEN_RESERVED0_LEN        23
#define DMA_AXI_RDMA_BLEN_RESERVED0_OFFSET     9
#define DMA_AXI_RDMA_BLEN_RESERVED0_MASK_BITS  0x007fffff /* [22:0] 0b00000000011111111111111111111111 */
#define DMA_AXI_RDMA_BLEN_RESERVED0_MASK       0xfffffe00 /* [31:9] 0b11111111111111111111111000000000 */

#define READ_DMA_AXI_RDMA_BLEN_RESERVED0(base) \
    npu_reg_read_mask(base, REG_DMA_AXI_RDMA_BLEN, DMA_AXI_RDMA_BLEN_RESERVED0_MASK, DMA_AXI_RDMA_BLEN_RESERVED0_OFFSET)
#define WRITE_DMA_AXI_RDMA_BLEN_RESERVED0(base, val) \
    npu_reg_write_mask(base, REG_DMA_AXI_RDMA_BLEN, val, DMA_AXI_RDMA_BLEN_RESERVED0_MASK, DMA_AXI_RDMA_BLEN_RESERVED0_OFFSET)

/* DMA.AXI_WDMA_BLEN (Category: DMA) */
#define READ_DMA_AXI_WDMA_BLEN(base) npu_reg_read(base, REG_DMA_AXI_WDMA_BLEN)
#define WRITE_DMA_AXI_WDMA_BLEN(base, val) npu_reg_write(base, REG_DMA_AXI_WDMA_BLEN, val)
/* DMA.AXI_WDMA_BLEN.AXI_WDMA_BLEN (Category: DMA) */
#define DMA_AXI_WDMA_BLEN_AXI_WDMA_BLEN_LEN        9
#define DMA_AXI_WDMA_BLEN_AXI_WDMA_BLEN_OFFSET     0
#define DMA_AXI_WDMA_BLEN_AXI_WDMA_BLEN_MASK_BITS  0x000001ff /* [8:0] 0b00000000000000000000000111111111 */
#define DMA_AXI_WDMA_BLEN_AXI_WDMA_BLEN_MASK       0x000001ff /* [8:0] 0b00000000000000000000000111111111 */

#define READ_DMA_AXI_WDMA_BLEN_AXI_WDMA_BLEN(base) \
    npu_reg_read_mask(base, REG_DMA_AXI_WDMA_BLEN, DMA_AXI_WDMA_BLEN_AXI_WDMA_BLEN_MASK, DMA_AXI_WDMA_BLEN_AXI_WDMA_BLEN_OFFSET)
#define WRITE_DMA_AXI_WDMA_BLEN_AXI_WDMA_BLEN(base, val) \
    npu_reg_write_mask(base, REG_DMA_AXI_WDMA_BLEN, val, DMA_AXI_WDMA_BLEN_AXI_WDMA_BLEN_MASK, DMA_AXI_WDMA_BLEN_AXI_WDMA_BLEN_OFFSET)

/* DMA.AXI_WDMA_BLEN.RESERVED0 (Category: DMA) */
#define DMA_AXI_WDMA_BLEN_RESERVED0_LEN        23
#define DMA_AXI_WDMA_BLEN_RESERVED0_OFFSET     9
#define DMA_AXI_WDMA_BLEN_RESERVED0_MASK_BITS  0x007fffff /* [22:0] 0b00000000011111111111111111111111 */
#define DMA_AXI_WDMA_BLEN_RESERVED0_MASK       0xfffffe00 /* [31:9] 0b11111111111111111111111000000000 */

#define READ_DMA_AXI_WDMA_BLEN_RESERVED0(base) \
    npu_reg_read_mask(base, REG_DMA_AXI_WDMA_BLEN, DMA_AXI_WDMA_BLEN_RESERVED0_MASK, DMA_AXI_WDMA_BLEN_RESERVED0_OFFSET)
#define WRITE_DMA_AXI_WDMA_BLEN_RESERVED0(base, val) \
    npu_reg_write_mask(base, REG_DMA_AXI_WDMA_BLEN, val, DMA_AXI_WDMA_BLEN_RESERVED0_MASK, DMA_AXI_WDMA_BLEN_RESERVED0_OFFSET)

/* DMA.AXI_RDMA_MO (Category: DMA) */
#define READ_DMA_AXI_RDMA_MO(base) npu_reg_read(base, REG_DMA_AXI_RDMA_MO)
#define WRITE_DMA_AXI_RDMA_MO(base, val) npu_reg_write(base, REG_DMA_AXI_RDMA_MO, val)
/* DMA.AXI_RDMA_MO.AXI_RDMA_MO (Category: DMA) */
#define DMA_AXI_RDMA_MO_AXI_RDMA_MO_LEN        4
#define DMA_AXI_RDMA_MO_AXI_RDMA_MO_OFFSET     0
#define DMA_AXI_RDMA_MO_AXI_RDMA_MO_MASK_BITS  0x0000000f /* [3:0] 0b00000000000000000000000000001111 */
#define DMA_AXI_RDMA_MO_AXI_RDMA_MO_MASK       0x0000000f /* [3:0] 0b00000000000000000000000000001111 */

#define READ_DMA_AXI_RDMA_MO_AXI_RDMA_MO(base) \
    npu_reg_read_mask(base, REG_DMA_AXI_RDMA_MO, DMA_AXI_RDMA_MO_AXI_RDMA_MO_MASK, DMA_AXI_RDMA_MO_AXI_RDMA_MO_OFFSET)
#define WRITE_DMA_AXI_RDMA_MO_AXI_RDMA_MO(base, val) \
    npu_reg_write_mask(base, REG_DMA_AXI_RDMA_MO, val, DMA_AXI_RDMA_MO_AXI_RDMA_MO_MASK, DMA_AXI_RDMA_MO_AXI_RDMA_MO_OFFSET)

/* DMA.AXI_RDMA_MO.RESERVED0 (Category: DMA) */
#define DMA_AXI_RDMA_MO_RESERVED0_LEN        28
#define DMA_AXI_RDMA_MO_RESERVED0_OFFSET     4
#define DMA_AXI_RDMA_MO_RESERVED0_MASK_BITS  0x0fffffff /* [27:0] 0b00001111111111111111111111111111 */
#define DMA_AXI_RDMA_MO_RESERVED0_MASK       0xfffffff0 /* [31:4] 0b11111111111111111111111111110000 */

#define READ_DMA_AXI_RDMA_MO_RESERVED0(base) \
    npu_reg_read_mask(base, REG_DMA_AXI_RDMA_MO, DMA_AXI_RDMA_MO_RESERVED0_MASK, DMA_AXI_RDMA_MO_RESERVED0_OFFSET)
#define WRITE_DMA_AXI_RDMA_MO_RESERVED0(base, val) \
    npu_reg_write_mask(base, REG_DMA_AXI_RDMA_MO, val, DMA_AXI_RDMA_MO_RESERVED0_MASK, DMA_AXI_RDMA_MO_RESERVED0_OFFSET)

/* DMA.AXI_WDMA_MO (Category: DMA) */
#define READ_DMA_AXI_WDMA_MO(base) npu_reg_read(base, REG_DMA_AXI_WDMA_MO)
#define WRITE_DMA_AXI_WDMA_MO(base, val) npu_reg_write(base, REG_DMA_AXI_WDMA_MO, val)
/* DMA.AXI_WDMA_MO.AXI_WDMA_MO (Category: DMA) */
#define DMA_AXI_WDMA_MO_AXI_WDMA_MO_LEN        4
#define DMA_AXI_WDMA_MO_AXI_WDMA_MO_OFFSET     0
#define DMA_AXI_WDMA_MO_AXI_WDMA_MO_MASK_BITS  0x0000000f /* [3:0] 0b00000000000000000000000000001111 */
#define DMA_AXI_WDMA_MO_AXI_WDMA_MO_MASK       0x0000000f /* [3:0] 0b00000000000000000000000000001111 */

#define READ_DMA_AXI_WDMA_MO_AXI_WDMA_MO(base) \
    npu_reg_read_mask(base, REG_DMA_AXI_WDMA_MO, DMA_AXI_WDMA_MO_AXI_WDMA_MO_MASK, DMA_AXI_WDMA_MO_AXI_WDMA_MO_OFFSET)
#define WRITE_DMA_AXI_WDMA_MO_AXI_WDMA_MO(base, val) \
    npu_reg_write_mask(base, REG_DMA_AXI_WDMA_MO, val, DMA_AXI_WDMA_MO_AXI_WDMA_MO_MASK, DMA_AXI_WDMA_MO_AXI_WDMA_MO_OFFSET)

/* DMA.AXI_WDMA_MO.RESERVED0 (Category: DMA) */
#define DMA_AXI_WDMA_MO_RESERVED0_LEN        28
#define DMA_AXI_WDMA_MO_RESERVED0_OFFSET     4
#define DMA_AXI_WDMA_MO_RESERVED0_MASK_BITS  0x0fffffff /* [27:0] 0b00001111111111111111111111111111 */
#define DMA_AXI_WDMA_MO_RESERVED0_MASK       0xfffffff0 /* [31:4] 0b11111111111111111111111111110000 */

#define READ_DMA_AXI_WDMA_MO_RESERVED0(base) \
    npu_reg_read_mask(base, REG_DMA_AXI_WDMA_MO, DMA_AXI_WDMA_MO_RESERVED0_MASK, DMA_AXI_WDMA_MO_RESERVED0_OFFSET)
#define WRITE_DMA_AXI_WDMA_MO_RESERVED0(base, val) \
    npu_reg_write_mask(base, REG_DMA_AXI_WDMA_MO, val, DMA_AXI_WDMA_MO_RESERVED0_MASK, DMA_AXI_WDMA_MO_RESERVED0_OFFSET)

/* DMA.AXI_4KB_BOUNDARY (Category: DMA) */
#define READ_DMA_AXI_4KB_BOUNDARY(base) npu_reg_read(base, REG_DMA_AXI_4KB_BOUNDARY)
#define WRITE_DMA_AXI_4KB_BOUNDARY(base, val) npu_reg_write(base, REG_DMA_AXI_4KB_BOUNDARY, val)
/* DMA.AXI_4KB_BOUNDARY.AXI_4KB_BOUNDARY (Category: DMA) */
#define DMA_AXI_4KB_BOUNDARY_AXI_4KB_BOUNDARY_LEN        1
#define DMA_AXI_4KB_BOUNDARY_AXI_4KB_BOUNDARY_OFFSET     0
#define DMA_AXI_4KB_BOUNDARY_AXI_4KB_BOUNDARY_MASK_BITS  0x00000001 /* [0:0] 0b00000000000000000000000000000001 */
#define DMA_AXI_4KB_BOUNDARY_AXI_4KB_BOUNDARY_MASK       0x00000001 /* [0:0] 0b00000000000000000000000000000001 */

#define READ_DMA_AXI_4KB_BOUNDARY_AXI_4KB_BOUNDARY(base) \
    npu_reg_read_mask(base, REG_DMA_AXI_4KB_BOUNDARY, DMA_AXI_4KB_BOUNDARY_AXI_4KB_BOUNDARY_MASK, DMA_AXI_4KB_BOUNDARY_AXI_4KB_BOUNDARY_OFFSET)
#define WRITE_DMA_AXI_4KB_BOUNDARY_AXI_4KB_BOUNDARY(base, val) \
    npu_reg_write_mask(base, REG_DMA_AXI_4KB_BOUNDARY, val, DMA_AXI_4KB_BOUNDARY_AXI_4KB_BOUNDARY_MASK, DMA_AXI_4KB_BOUNDARY_AXI_4KB_BOUNDARY_OFFSET)

/* DMA.AXI_4KB_BOUNDARY.RESERVED0 (Category: DMA) */
#define DMA_AXI_4KB_BOUNDARY_RESERVED0_LEN        31
#define DMA_AXI_4KB_BOUNDARY_RESERVED0_OFFSET     1
#define DMA_AXI_4KB_BOUNDARY_RESERVED0_MASK_BITS  0x7fffffff /* [30:0] 0b01111111111111111111111111111111 */
#define DMA_AXI_4KB_BOUNDARY_RESERVED0_MASK       0xfffffffe /* [31:1] 0b11111111111111111111111111111110 */

#define READ_DMA_AXI_4KB_BOUNDARY_RESERVED0(base) \
    npu_reg_read_mask(base, REG_DMA_AXI_4KB_BOUNDARY, DMA_AXI_4KB_BOUNDARY_RESERVED0_MASK, DMA_AXI_4KB_BOUNDARY_RESERVED0_OFFSET)
#define WRITE_DMA_AXI_4KB_BOUNDARY_RESERVED0(base, val) \
    npu_reg_write_mask(base, REG_DMA_AXI_4KB_BOUNDARY, val, DMA_AXI_4KB_BOUNDARY_RESERVED0_MASK, DMA_AXI_4KB_BOUNDARY_RESERVED0_OFFSET)

/* DMA.AXI_RDMA_QOS (Category: DMA) */
#define READ_DMA_AXI_RDMA_QOS(base) npu_reg_read(base, REG_DMA_AXI_RDMA_QOS)
#define WRITE_DMA_AXI_RDMA_QOS(base, val) npu_reg_write(base, REG_DMA_AXI_RDMA_QOS, val)
/* DMA.AXI_RDMA_QOS.AXI_RDMA_QOS_LOW (Category: DMA) */
#define DMA_AXI_RDMA_QOS_AXI_RDMA_QOS_LOW_LEN        4
#define DMA_AXI_RDMA_QOS_AXI_RDMA_QOS_LOW_OFFSET     0
#define DMA_AXI_RDMA_QOS_AXI_RDMA_QOS_LOW_MASK_BITS  0x0000000f /* [3:0] 0b00000000000000000000000000001111 */
#define DMA_AXI_RDMA_QOS_AXI_RDMA_QOS_LOW_MASK       0x0000000f /* [3:0] 0b00000000000000000000000000001111 */

#define READ_DMA_AXI_RDMA_QOS_AXI_RDMA_QOS_LOW(base) \
    npu_reg_read_mask(base, REG_DMA_AXI_RDMA_QOS, DMA_AXI_RDMA_QOS_AXI_RDMA_QOS_LOW_MASK, DMA_AXI_RDMA_QOS_AXI_RDMA_QOS_LOW_OFFSET)
#define WRITE_DMA_AXI_RDMA_QOS_AXI_RDMA_QOS_LOW(base, val) \
    npu_reg_write_mask(base, REG_DMA_AXI_RDMA_QOS, val, DMA_AXI_RDMA_QOS_AXI_RDMA_QOS_LOW_MASK, DMA_AXI_RDMA_QOS_AXI_RDMA_QOS_LOW_OFFSET)

/* DMA.AXI_RDMA_QOS.AXI_RDMA_QOS_MEDIUM (Category: DMA) */
#define DMA_AXI_RDMA_QOS_AXI_RDMA_QOS_MEDIUM_LEN        4
#define DMA_AXI_RDMA_QOS_AXI_RDMA_QOS_MEDIUM_OFFSET     4
#define DMA_AXI_RDMA_QOS_AXI_RDMA_QOS_MEDIUM_MASK_BITS  0x0000000f /* [3:0] 0b00000000000000000000000000001111 */
#define DMA_AXI_RDMA_QOS_AXI_RDMA_QOS_MEDIUM_MASK       0x000000f0 /* [7:4] 0b00000000000000000000000011110000 */

#define READ_DMA_AXI_RDMA_QOS_AXI_RDMA_QOS_MEDIUM(base) \
    npu_reg_read_mask(base, REG_DMA_AXI_RDMA_QOS, DMA_AXI_RDMA_QOS_AXI_RDMA_QOS_MEDIUM_MASK, DMA_AXI_RDMA_QOS_AXI_RDMA_QOS_MEDIUM_OFFSET)
#define WRITE_DMA_AXI_RDMA_QOS_AXI_RDMA_QOS_MEDIUM(base, val) \
    npu_reg_write_mask(base, REG_DMA_AXI_RDMA_QOS, val, DMA_AXI_RDMA_QOS_AXI_RDMA_QOS_MEDIUM_MASK, DMA_AXI_RDMA_QOS_AXI_RDMA_QOS_MEDIUM_OFFSET)

/* DMA.AXI_RDMA_QOS.AXI_RDMA_QOS_HIGH (Category: DMA) */
#define DMA_AXI_RDMA_QOS_AXI_RDMA_QOS_HIGH_LEN        4
#define DMA_AXI_RDMA_QOS_AXI_RDMA_QOS_HIGH_OFFSET     8
#define DMA_AXI_RDMA_QOS_AXI_RDMA_QOS_HIGH_MASK_BITS  0x0000000f /* [3:0] 0b00000000000000000000000000001111 */
#define DMA_AXI_RDMA_QOS_AXI_RDMA_QOS_HIGH_MASK       0x00000f00 /* [11:8] 0b00000000000000000000111100000000 */

#define READ_DMA_AXI_RDMA_QOS_AXI_RDMA_QOS_HIGH(base) \
    npu_reg_read_mask(base, REG_DMA_AXI_RDMA_QOS, DMA_AXI_RDMA_QOS_AXI_RDMA_QOS_HIGH_MASK, DMA_AXI_RDMA_QOS_AXI_RDMA_QOS_HIGH_OFFSET)
#define WRITE_DMA_AXI_RDMA_QOS_AXI_RDMA_QOS_HIGH(base, val) \
    npu_reg_write_mask(base, REG_DMA_AXI_RDMA_QOS, val, DMA_AXI_RDMA_QOS_AXI_RDMA_QOS_HIGH_MASK, DMA_AXI_RDMA_QOS_AXI_RDMA_QOS_HIGH_OFFSET)

/* DMA.AXI_RDMA_QOS.RESERVED0 (Category: DMA) */
#define DMA_AXI_RDMA_QOS_RESERVED0_LEN        20
#define DMA_AXI_RDMA_QOS_RESERVED0_OFFSET     12
#define DMA_AXI_RDMA_QOS_RESERVED0_MASK_BITS  0x000fffff /* [19:0] 0b00000000000011111111111111111111 */
#define DMA_AXI_RDMA_QOS_RESERVED0_MASK       0xfffff000 /* [31:12] 0b11111111111111111111000000000000 */

#define READ_DMA_AXI_RDMA_QOS_RESERVED0(base) \
    npu_reg_read_mask(base, REG_DMA_AXI_RDMA_QOS, DMA_AXI_RDMA_QOS_RESERVED0_MASK, DMA_AXI_RDMA_QOS_RESERVED0_OFFSET)
#define WRITE_DMA_AXI_RDMA_QOS_RESERVED0(base, val) \
    npu_reg_write_mask(base, REG_DMA_AXI_RDMA_QOS, val, DMA_AXI_RDMA_QOS_RESERVED0_MASK, DMA_AXI_RDMA_QOS_RESERVED0_OFFSET)

/* DMA.AXI_WDMA_QOS (Category: DMA) */
#define READ_DMA_AXI_WDMA_QOS(base) npu_reg_read(base, REG_DMA_AXI_WDMA_QOS)
#define WRITE_DMA_AXI_WDMA_QOS(base, val) npu_reg_write(base, REG_DMA_AXI_WDMA_QOS, val)
/* DMA.AXI_WDMA_QOS.AXI_WDMA_QOS_LOW (Category: DMA) */
#define DMA_AXI_WDMA_QOS_AXI_WDMA_QOS_LOW_LEN        4
#define DMA_AXI_WDMA_QOS_AXI_WDMA_QOS_LOW_OFFSET     0
#define DMA_AXI_WDMA_QOS_AXI_WDMA_QOS_LOW_MASK_BITS  0x0000000f /* [3:0] 0b00000000000000000000000000001111 */
#define DMA_AXI_WDMA_QOS_AXI_WDMA_QOS_LOW_MASK       0x0000000f /* [3:0] 0b00000000000000000000000000001111 */

#define READ_DMA_AXI_WDMA_QOS_AXI_WDMA_QOS_LOW(base) \
    npu_reg_read_mask(base, REG_DMA_AXI_WDMA_QOS, DMA_AXI_WDMA_QOS_AXI_WDMA_QOS_LOW_MASK, DMA_AXI_WDMA_QOS_AXI_WDMA_QOS_LOW_OFFSET)
#define WRITE_DMA_AXI_WDMA_QOS_AXI_WDMA_QOS_LOW(base, val) \
    npu_reg_write_mask(base, REG_DMA_AXI_WDMA_QOS, val, DMA_AXI_WDMA_QOS_AXI_WDMA_QOS_LOW_MASK, DMA_AXI_WDMA_QOS_AXI_WDMA_QOS_LOW_OFFSET)

/* DMA.AXI_WDMA_QOS.AXI_WDMA_QOS_MEDIUM (Category: DMA) */
#define DMA_AXI_WDMA_QOS_AXI_WDMA_QOS_MEDIUM_LEN        4
#define DMA_AXI_WDMA_QOS_AXI_WDMA_QOS_MEDIUM_OFFSET     4
#define DMA_AXI_WDMA_QOS_AXI_WDMA_QOS_MEDIUM_MASK_BITS  0x0000000f /* [3:0] 0b00000000000000000000000000001111 */
#define DMA_AXI_WDMA_QOS_AXI_WDMA_QOS_MEDIUM_MASK       0x000000f0 /* [7:4] 0b00000000000000000000000011110000 */

#define READ_DMA_AXI_WDMA_QOS_AXI_WDMA_QOS_MEDIUM(base) \
    npu_reg_read_mask(base, REG_DMA_AXI_WDMA_QOS, DMA_AXI_WDMA_QOS_AXI_WDMA_QOS_MEDIUM_MASK, DMA_AXI_WDMA_QOS_AXI_WDMA_QOS_MEDIUM_OFFSET)
#define WRITE_DMA_AXI_WDMA_QOS_AXI_WDMA_QOS_MEDIUM(base, val) \
    npu_reg_write_mask(base, REG_DMA_AXI_WDMA_QOS, val, DMA_AXI_WDMA_QOS_AXI_WDMA_QOS_MEDIUM_MASK, DMA_AXI_WDMA_QOS_AXI_WDMA_QOS_MEDIUM_OFFSET)

/* DMA.AXI_WDMA_QOS.AXI_WDMA_QOS_HIGH (Category: DMA) */
#define DMA_AXI_WDMA_QOS_AXI_WDMA_QOS_HIGH_LEN        4
#define DMA_AXI_WDMA_QOS_AXI_WDMA_QOS_HIGH_OFFSET     8
#define DMA_AXI_WDMA_QOS_AXI_WDMA_QOS_HIGH_MASK_BITS  0x0000000f /* [3:0] 0b00000000000000000000000000001111 */
#define DMA_AXI_WDMA_QOS_AXI_WDMA_QOS_HIGH_MASK       0x00000f00 /* [11:8] 0b00000000000000000000111100000000 */

#define READ_DMA_AXI_WDMA_QOS_AXI_WDMA_QOS_HIGH(base) \
    npu_reg_read_mask(base, REG_DMA_AXI_WDMA_QOS, DMA_AXI_WDMA_QOS_AXI_WDMA_QOS_HIGH_MASK, DMA_AXI_WDMA_QOS_AXI_WDMA_QOS_HIGH_OFFSET)
#define WRITE_DMA_AXI_WDMA_QOS_AXI_WDMA_QOS_HIGH(base, val) \
    npu_reg_write_mask(base, REG_DMA_AXI_WDMA_QOS, val, DMA_AXI_WDMA_QOS_AXI_WDMA_QOS_HIGH_MASK, DMA_AXI_WDMA_QOS_AXI_WDMA_QOS_HIGH_OFFSET)

/* DMA.AXI_WDMA_QOS.RESERVED0 (Category: DMA) */
#define DMA_AXI_WDMA_QOS_RESERVED0_LEN        20
#define DMA_AXI_WDMA_QOS_RESERVED0_OFFSET     12
#define DMA_AXI_WDMA_QOS_RESERVED0_MASK_BITS  0x000fffff /* [19:0] 0b00000000000011111111111111111111 */
#define DMA_AXI_WDMA_QOS_RESERVED0_MASK       0xfffff000 /* [31:12] 0b11111111111111111111000000000000 */

#define READ_DMA_AXI_WDMA_QOS_RESERVED0(base) \
    npu_reg_read_mask(base, REG_DMA_AXI_WDMA_QOS, DMA_AXI_WDMA_QOS_RESERVED0_MASK, DMA_AXI_WDMA_QOS_RESERVED0_OFFSET)
#define WRITE_DMA_AXI_WDMA_QOS_RESERVED0(base, val) \
    npu_reg_write_mask(base, REG_DMA_AXI_WDMA_QOS, val, DMA_AXI_WDMA_QOS_RESERVED0_MASK, DMA_AXI_WDMA_QOS_RESERVED0_OFFSET)

/* DMA.SFR_BASE_ADDR_LOW (Category: DMA) */
#define READ_DMA_SFR_BASE_ADDR_LOW(base) npu_reg_read(base, REG_DMA_SFR_BASE_ADDR_LOW)
#define WRITE_DMA_SFR_BASE_ADDR_LOW(base, val) npu_reg_write(base, REG_DMA_SFR_BASE_ADDR_LOW, val)
/* DMA.SFR_BASE_ADDR_LOW.SFR_BASE_ADDR_LOW (Category: DMA) */
#define DMA_SFR_BASE_ADDR_LOW_SFR_BASE_ADDR_LOW_LEN        32
#define DMA_SFR_BASE_ADDR_LOW_SFR_BASE_ADDR_LOW_OFFSET     0
#define DMA_SFR_BASE_ADDR_LOW_SFR_BASE_ADDR_LOW_MASK_BITS  0xffffffff /* [31:0] 0b11111111111111111111111111111111 */
#define DMA_SFR_BASE_ADDR_LOW_SFR_BASE_ADDR_LOW_MASK       0xffffffff /* [31:0] 0b11111111111111111111111111111111 */

#define READ_DMA_SFR_BASE_ADDR_LOW_SFR_BASE_ADDR_LOW(base) \
    npu_reg_read_mask(base, REG_DMA_SFR_BASE_ADDR_LOW, DMA_SFR_BASE_ADDR_LOW_SFR_BASE_ADDR_LOW_MASK, DMA_SFR_BASE_ADDR_LOW_SFR_BASE_ADDR_LOW_OFFSET)
#define WRITE_DMA_SFR_BASE_ADDR_LOW_SFR_BASE_ADDR_LOW(base, val) \
    npu_reg_write_mask(base, REG_DMA_SFR_BASE_ADDR_LOW, val, DMA_SFR_BASE_ADDR_LOW_SFR_BASE_ADDR_LOW_MASK, DMA_SFR_BASE_ADDR_LOW_SFR_BASE_ADDR_LOW_OFFSET)

/* DMA.SFR_BASE_ADDR_HIGH (Category: DMA) */
#define READ_DMA_SFR_BASE_ADDR_HIGH(base) npu_reg_read(base, REG_DMA_SFR_BASE_ADDR_HIGH)
#define WRITE_DMA_SFR_BASE_ADDR_HIGH(base, val) npu_reg_write(base, REG_DMA_SFR_BASE_ADDR_HIGH, val)
/* DMA.SFR_BASE_ADDR_HIGH.SFR_BASE_ADDR_HIGH (Category: DMA) */
#define DMA_SFR_BASE_ADDR_HIGH_SFR_BASE_ADDR_HIGH_LEN        32
#define DMA_SFR_BASE_ADDR_HIGH_SFR_BASE_ADDR_HIGH_OFFSET     0
#define DMA_SFR_BASE_ADDR_HIGH_SFR_BASE_ADDR_HIGH_MASK_BITS  0xffffffff /* [31:0] 0b11111111111111111111111111111111 */
#define DMA_SFR_BASE_ADDR_HIGH_SFR_BASE_ADDR_HIGH_MASK       0xffffffff /* [31:0] 0b11111111111111111111111111111111 */

#define READ_DMA_SFR_BASE_ADDR_HIGH_SFR_BASE_ADDR_HIGH(base) \
    npu_reg_read_mask(base, REG_DMA_SFR_BASE_ADDR_HIGH, DMA_SFR_BASE_ADDR_HIGH_SFR_BASE_ADDR_HIGH_MASK, DMA_SFR_BASE_ADDR_HIGH_SFR_BASE_ADDR_HIGH_OFFSET)
#define WRITE_DMA_SFR_BASE_ADDR_HIGH_SFR_BASE_ADDR_HIGH(base, val) \
    npu_reg_write_mask(base, REG_DMA_SFR_BASE_ADDR_HIGH, val, DMA_SFR_BASE_ADDR_HIGH_SFR_BASE_ADDR_HIGH_MASK, DMA_SFR_BASE_ADDR_HIGH_SFR_BASE_ADDR_HIGH_OFFSET)

/* DMA.SFR_START_ADDR (Category: DMA) */
#define READ_DMA_SFR_START_ADDR(base) npu_reg_read(base, REG_DMA_SFR_START_ADDR)
#define WRITE_DMA_SFR_START_ADDR(base, val) npu_reg_write(base, REG_DMA_SFR_START_ADDR, val)
/* DMA.SFR_START_ADDR.SFR_START_ADDR (Category: DMA) */
#define DMA_SFR_START_ADDR_SFR_START_ADDR_LEN        16
#define DMA_SFR_START_ADDR_SFR_START_ADDR_OFFSET     0
#define DMA_SFR_START_ADDR_SFR_START_ADDR_MASK_BITS  0x0000ffff /* [15:0] 0b00000000000000001111111111111111 */
#define DMA_SFR_START_ADDR_SFR_START_ADDR_MASK       0x0000ffff /* [15:0] 0b00000000000000001111111111111111 */

#define READ_DMA_SFR_START_ADDR_SFR_START_ADDR(base) \
    npu_reg_read_mask(base, REG_DMA_SFR_START_ADDR, DMA_SFR_START_ADDR_SFR_START_ADDR_MASK, DMA_SFR_START_ADDR_SFR_START_ADDR_OFFSET)
#define WRITE_DMA_SFR_START_ADDR_SFR_START_ADDR(base, val) \
    npu_reg_write_mask(base, REG_DMA_SFR_START_ADDR, val, DMA_SFR_START_ADDR_SFR_START_ADDR_MASK, DMA_SFR_START_ADDR_SFR_START_ADDR_OFFSET)

/* DMA.SFR_START_ADDR.RESERVED0 (Category: DMA) */
#define DMA_SFR_START_ADDR_RESERVED0_LEN        16
#define DMA_SFR_START_ADDR_RESERVED0_OFFSET     16
#define DMA_SFR_START_ADDR_RESERVED0_MASK_BITS  0x0000ffff /* [15:0] 0b00000000000000001111111111111111 */
#define DMA_SFR_START_ADDR_RESERVED0_MASK       0xffff0000 /* [31:16] 0b11111111111111110000000000000000 */

#define READ_DMA_SFR_START_ADDR_RESERVED0(base) \
    npu_reg_read_mask(base, REG_DMA_SFR_START_ADDR, DMA_SFR_START_ADDR_RESERVED0_MASK, DMA_SFR_START_ADDR_RESERVED0_OFFSET)
#define WRITE_DMA_SFR_START_ADDR_RESERVED0(base, val) \
    npu_reg_write_mask(base, REG_DMA_SFR_START_ADDR, val, DMA_SFR_START_ADDR_RESERVED0_MASK, DMA_SFR_START_ADDR_RESERVED0_OFFSET)

/* DMA.SFR_ADDR_OFFS (Category: DMA) */
#define READ_DMA_SFR_ADDR_OFFS(base) npu_reg_read(base, REG_DMA_SFR_ADDR_OFFS)
#define WRITE_DMA_SFR_ADDR_OFFS(base, val) npu_reg_write(base, REG_DMA_SFR_ADDR_OFFS, val)
/* DMA.SFR_ADDR_OFFS.SFR_ADDR_OFFS (Category: DMA) */
#define DMA_SFR_ADDR_OFFS_SFR_ADDR_OFFS_LEN        14
#define DMA_SFR_ADDR_OFFS_SFR_ADDR_OFFS_OFFSET     0
#define DMA_SFR_ADDR_OFFS_SFR_ADDR_OFFS_MASK_BITS  0x00003fff /* [13:0] 0b00000000000000000011111111111111 */
#define DMA_SFR_ADDR_OFFS_SFR_ADDR_OFFS_MASK       0x00003fff /* [13:0] 0b00000000000000000011111111111111 */

#define READ_DMA_SFR_ADDR_OFFS_SFR_ADDR_OFFS(base) \
    npu_reg_read_mask(base, REG_DMA_SFR_ADDR_OFFS, DMA_SFR_ADDR_OFFS_SFR_ADDR_OFFS_MASK, DMA_SFR_ADDR_OFFS_SFR_ADDR_OFFS_OFFSET)
#define WRITE_DMA_SFR_ADDR_OFFS_SFR_ADDR_OFFS(base, val) \
    npu_reg_write_mask(base, REG_DMA_SFR_ADDR_OFFS, val, DMA_SFR_ADDR_OFFS_SFR_ADDR_OFFS_MASK, DMA_SFR_ADDR_OFFS_SFR_ADDR_OFFS_OFFSET)

/* DMA.SFR_ADDR_OFFS.RESERVED0 (Category: DMA) */
#define DMA_SFR_ADDR_OFFS_RESERVED0_LEN        18
#define DMA_SFR_ADDR_OFFS_RESERVED0_OFFSET     14
#define DMA_SFR_ADDR_OFFS_RESERVED0_MASK_BITS  0x0003ffff /* [17:0] 0b00000000000000111111111111111111 */
#define DMA_SFR_ADDR_OFFS_RESERVED0_MASK       0xffffc000 /* [31:14] 0b11111111111111111100000000000000 */

#define READ_DMA_SFR_ADDR_OFFS_RESERVED0(base) \
    npu_reg_read_mask(base, REG_DMA_SFR_ADDR_OFFS, DMA_SFR_ADDR_OFFS_RESERVED0_MASK, DMA_SFR_ADDR_OFFS_RESERVED0_OFFSET)
#define WRITE_DMA_SFR_ADDR_OFFS_RESERVED0(base, val) \
    npu_reg_write_mask(base, REG_DMA_SFR_ADDR_OFFS, val, DMA_SFR_ADDR_OFFS_RESERVED0_MASK, DMA_SFR_ADDR_OFFS_RESERVED0_OFFSET)

/* DMA.HALT_CMD (Category: DMA) */
#define READ_DMA_HALT_CMD(base) npu_reg_read(base, REG_DMA_HALT_CMD)
#define WRITE_DMA_HALT_CMD(base, val) npu_reg_write(base, REG_DMA_HALT_CMD, val)
/* DMA.HALT_CMD.HALT_EN (Category: DMA) */
#define DMA_HALT_CMD_HALT_EN_LEN        1
#define DMA_HALT_CMD_HALT_EN_OFFSET     0
#define DMA_HALT_CMD_HALT_EN_MASK_BITS  0x00000001 /* [0:0] 0b00000000000000000000000000000001 */
#define DMA_HALT_CMD_HALT_EN_MASK       0x00000001 /* [0:0] 0b00000000000000000000000000000001 */

#define READ_DMA_HALT_CMD_HALT_EN(base) \
    npu_reg_read_mask(base, REG_DMA_HALT_CMD, DMA_HALT_CMD_HALT_EN_MASK, DMA_HALT_CMD_HALT_EN_OFFSET)
#define WRITE_DMA_HALT_CMD_HALT_EN(base, val) \
    npu_reg_write_mask(base, REG_DMA_HALT_CMD, val, DMA_HALT_CMD_HALT_EN_MASK, DMA_HALT_CMD_HALT_EN_OFFSET)

/* DMA.HALT_CMD.RESERVED0 (Category: DMA) */
#define DMA_HALT_CMD_RESERVED0_LEN        31
#define DMA_HALT_CMD_RESERVED0_OFFSET     1
#define DMA_HALT_CMD_RESERVED0_MASK_BITS  0x7fffffff /* [30:0] 0b01111111111111111111111111111111 */
#define DMA_HALT_CMD_RESERVED0_MASK       0xfffffffe /* [31:1] 0b11111111111111111111111111111110 */

#define READ_DMA_HALT_CMD_RESERVED0(base) \
    npu_reg_read_mask(base, REG_DMA_HALT_CMD, DMA_HALT_CMD_RESERVED0_MASK, DMA_HALT_CMD_RESERVED0_OFFSET)
#define WRITE_DMA_HALT_CMD_RESERVED0(base, val) \
    npu_reg_write_mask(base, REG_DMA_HALT_CMD, val, DMA_HALT_CMD_RESERVED0_MASK, DMA_HALT_CMD_RESERVED0_OFFSET)

/* DMA.HALT_STATUS (Category: DMA) */
#define READ_DMA_HALT_STATUS(base) npu_reg_read(base, REG_DMA_HALT_STATUS)
#define WRITE_DMA_HALT_STATUS(base, val) npu_reg_write(base, REG_DMA_HALT_STATUS, val)
/* DMA.HALT_STATUS.HALT_DONE (Category: DMA) */
#define DMA_HALT_STATUS_HALT_DONE_LEN        1
#define DMA_HALT_STATUS_HALT_DONE_OFFSET     0
#define DMA_HALT_STATUS_HALT_DONE_MASK_BITS  0x00000001 /* [0:0] 0b00000000000000000000000000000001 */
#define DMA_HALT_STATUS_HALT_DONE_MASK       0x00000001 /* [0:0] 0b00000000000000000000000000000001 */

#define READ_DMA_HALT_STATUS_HALT_DONE(base) \
    npu_reg_read_mask(base, REG_DMA_HALT_STATUS, DMA_HALT_STATUS_HALT_DONE_MASK, DMA_HALT_STATUS_HALT_DONE_OFFSET)
#define WRITE_DMA_HALT_STATUS_HALT_DONE(base, val) \
    npu_reg_write_mask(base, REG_DMA_HALT_STATUS, val, DMA_HALT_STATUS_HALT_DONE_MASK, DMA_HALT_STATUS_HALT_DONE_OFFSET)

/* DMA.HALT_STATUS.RESERVED0 (Category: DMA) */
#define DMA_HALT_STATUS_RESERVED0_LEN        31
#define DMA_HALT_STATUS_RESERVED0_OFFSET     1
#define DMA_HALT_STATUS_RESERVED0_MASK_BITS  0x7fffffff /* [30:0] 0b01111111111111111111111111111111 */
#define DMA_HALT_STATUS_RESERVED0_MASK       0xfffffffe /* [31:1] 0b11111111111111111111111111111110 */

#define READ_DMA_HALT_STATUS_RESERVED0(base) \
    npu_reg_read_mask(base, REG_DMA_HALT_STATUS, DMA_HALT_STATUS_RESERVED0_MASK, DMA_HALT_STATUS_RESERVED0_OFFSET)
#define WRITE_DMA_HALT_STATUS_RESERVED0(base, val) \
    npu_reg_write_mask(base, REG_DMA_HALT_STATUS, val, DMA_HALT_STATUS_RESERVED0_MASK, DMA_HALT_STATUS_RESERVED0_OFFSET)

/* DMA.USR_MODE_EN (Category: DMA) */
#define READ_DMA_USR_MODE_EN(base) npu_reg_read(base, REG_DMA_USR_MODE_EN)
#define WRITE_DMA_USR_MODE_EN(base, val) npu_reg_write(base, REG_DMA_USR_MODE_EN, val)
/* DMA.USR_MODE_EN.USR_MODE_EN (Category: DMA) */
#define DMA_USR_MODE_EN_USR_MODE_EN_LEN        1
#define DMA_USR_MODE_EN_USR_MODE_EN_OFFSET     0
#define DMA_USR_MODE_EN_USR_MODE_EN_MASK_BITS  0x00000001 /* [0:0] 0b00000000000000000000000000000001 */
#define DMA_USR_MODE_EN_USR_MODE_EN_MASK       0x00000001 /* [0:0] 0b00000000000000000000000000000001 */

#define READ_DMA_USR_MODE_EN_USR_MODE_EN(base) \
    npu_reg_read_mask(base, REG_DMA_USR_MODE_EN, DMA_USR_MODE_EN_USR_MODE_EN_MASK, DMA_USR_MODE_EN_USR_MODE_EN_OFFSET)
#define WRITE_DMA_USR_MODE_EN_USR_MODE_EN(base, val) \
    npu_reg_write_mask(base, REG_DMA_USR_MODE_EN, val, DMA_USR_MODE_EN_USR_MODE_EN_MASK, DMA_USR_MODE_EN_USR_MODE_EN_OFFSET)

/* DMA.USR_MODE_EN.RESERVED0 (Category: DMA) */
#define DMA_USR_MODE_EN_RESERVED0_LEN        31
#define DMA_USR_MODE_EN_RESERVED0_OFFSET     1
#define DMA_USR_MODE_EN_RESERVED0_MASK_BITS  0x7fffffff /* [30:0] 0b01111111111111111111111111111111 */
#define DMA_USR_MODE_EN_RESERVED0_MASK       0xfffffffe /* [31:1] 0b11111111111111111111111111111110 */

#define READ_DMA_USR_MODE_EN_RESERVED0(base) \
    npu_reg_read_mask(base, REG_DMA_USR_MODE_EN, DMA_USR_MODE_EN_RESERVED0_MASK, DMA_USR_MODE_EN_RESERVED0_OFFSET)
#define WRITE_DMA_USR_MODE_EN_RESERVED0(base, val) \
    npu_reg_write_mask(base, REG_DMA_USR_MODE_EN, val, DMA_USR_MODE_EN_RESERVED0_MASK, DMA_USR_MODE_EN_RESERVED0_OFFSET)

/* DMA.USR_DMA_AXI_RADDR (Category: DMA) */
#define READ_DMA_USR_DMA_AXI_RADDR(base) npu_reg_read(base, REG_DMA_USR_DMA_AXI_RADDR)
#define WRITE_DMA_USR_DMA_AXI_RADDR(base, val) npu_reg_write(base, REG_DMA_USR_DMA_AXI_RADDR, val)
/* DMA.USR_DMA_AXI_RADDR.USR_DMA_AXI_RADDR (Category: DMA) */
#define DMA_USR_DMA_AXI_RADDR_USR_DMA_AXI_RADDR_LEN        32
#define DMA_USR_DMA_AXI_RADDR_USR_DMA_AXI_RADDR_OFFSET     0
#define DMA_USR_DMA_AXI_RADDR_USR_DMA_AXI_RADDR_MASK_BITS  0xffffffff /* [31:0] 0b11111111111111111111111111111111 */
#define DMA_USR_DMA_AXI_RADDR_USR_DMA_AXI_RADDR_MASK       0xffffffff /* [31:0] 0b11111111111111111111111111111111 */

#define READ_DMA_USR_DMA_AXI_RADDR_USR_DMA_AXI_RADDR(base) \
    npu_reg_read_mask(base, REG_DMA_USR_DMA_AXI_RADDR, DMA_USR_DMA_AXI_RADDR_USR_DMA_AXI_RADDR_MASK, DMA_USR_DMA_AXI_RADDR_USR_DMA_AXI_RADDR_OFFSET)
#define WRITE_DMA_USR_DMA_AXI_RADDR_USR_DMA_AXI_RADDR(base, val) \
    npu_reg_write_mask(base, REG_DMA_USR_DMA_AXI_RADDR, val, DMA_USR_DMA_AXI_RADDR_USR_DMA_AXI_RADDR_MASK, DMA_USR_DMA_AXI_RADDR_USR_DMA_AXI_RADDR_OFFSET)

/* DMA.USR_DMA_AXI_WADDR (Category: DMA) */
#define READ_DMA_USR_DMA_AXI_WADDR(base) npu_reg_read(base, REG_DMA_USR_DMA_AXI_WADDR)
#define WRITE_DMA_USR_DMA_AXI_WADDR(base, val) npu_reg_write(base, REG_DMA_USR_DMA_AXI_WADDR, val)
/* DMA.USR_DMA_AXI_WADDR.USR_DMA_AXI_WADDR (Category: DMA) */
#define DMA_USR_DMA_AXI_WADDR_USR_DMA_AXI_WADDR_LEN        32
#define DMA_USR_DMA_AXI_WADDR_USR_DMA_AXI_WADDR_OFFSET     0
#define DMA_USR_DMA_AXI_WADDR_USR_DMA_AXI_WADDR_MASK_BITS  0xffffffff /* [31:0] 0b11111111111111111111111111111111 */
#define DMA_USR_DMA_AXI_WADDR_USR_DMA_AXI_WADDR_MASK       0xffffffff /* [31:0] 0b11111111111111111111111111111111 */

#define READ_DMA_USR_DMA_AXI_WADDR_USR_DMA_AXI_WADDR(base) \
    npu_reg_read_mask(base, REG_DMA_USR_DMA_AXI_WADDR, DMA_USR_DMA_AXI_WADDR_USR_DMA_AXI_WADDR_MASK, DMA_USR_DMA_AXI_WADDR_USR_DMA_AXI_WADDR_OFFSET)
#define WRITE_DMA_USR_DMA_AXI_WADDR_USR_DMA_AXI_WADDR(base, val) \
    npu_reg_write_mask(base, REG_DMA_USR_DMA_AXI_WADDR, val, DMA_USR_DMA_AXI_WADDR_USR_DMA_AXI_WADDR_MASK, DMA_USR_DMA_AXI_WADDR_USR_DMA_AXI_WADDR_OFFSET)

/* DMA.USR_DMA_SRAM_RADDR (Category: DMA) */
#define READ_DMA_USR_DMA_SRAM_RADDR(base) npu_reg_read(base, REG_DMA_USR_DMA_SRAM_RADDR)
#define WRITE_DMA_USR_DMA_SRAM_RADDR(base, val) npu_reg_write(base, REG_DMA_USR_DMA_SRAM_RADDR, val)
/* DMA.USR_DMA_SRAM_RADDR.USR_DMA_SRAM_RADDR (Category: DMA) */
#define DMA_USR_DMA_SRAM_RADDR_USR_DMA_SRAM_RADDR_LEN        32
#define DMA_USR_DMA_SRAM_RADDR_USR_DMA_SRAM_RADDR_OFFSET     0
#define DMA_USR_DMA_SRAM_RADDR_USR_DMA_SRAM_RADDR_MASK_BITS  0xffffffff /* [31:0] 0b11111111111111111111111111111111 */
#define DMA_USR_DMA_SRAM_RADDR_USR_DMA_SRAM_RADDR_MASK       0xffffffff /* [31:0] 0b11111111111111111111111111111111 */

#define READ_DMA_USR_DMA_SRAM_RADDR_USR_DMA_SRAM_RADDR(base) \
    npu_reg_read_mask(base, REG_DMA_USR_DMA_SRAM_RADDR, DMA_USR_DMA_SRAM_RADDR_USR_DMA_SRAM_RADDR_MASK, DMA_USR_DMA_SRAM_RADDR_USR_DMA_SRAM_RADDR_OFFSET)
#define WRITE_DMA_USR_DMA_SRAM_RADDR_USR_DMA_SRAM_RADDR(base, val) \
    npu_reg_write_mask(base, REG_DMA_USR_DMA_SRAM_RADDR, val, DMA_USR_DMA_SRAM_RADDR_USR_DMA_SRAM_RADDR_MASK, DMA_USR_DMA_SRAM_RADDR_USR_DMA_SRAM_RADDR_OFFSET)

/* DMA.USR_DMA_SRAM_WADDR (Category: DMA) */
#define READ_DMA_USR_DMA_SRAM_WADDR(base) npu_reg_read(base, REG_DMA_USR_DMA_SRAM_WADDR)
#define WRITE_DMA_USR_DMA_SRAM_WADDR(base, val) npu_reg_write(base, REG_DMA_USR_DMA_SRAM_WADDR, val)
/* DMA.USR_DMA_SRAM_WADDR.USR_DMA_SRAM_WADDR (Category: DMA) */
#define DMA_USR_DMA_SRAM_WADDR_USR_DMA_SRAM_WADDR_LEN        32
#define DMA_USR_DMA_SRAM_WADDR_USR_DMA_SRAM_WADDR_OFFSET     0
#define DMA_USR_DMA_SRAM_WADDR_USR_DMA_SRAM_WADDR_MASK_BITS  0xffffffff /* [31:0] 0b11111111111111111111111111111111 */
#define DMA_USR_DMA_SRAM_WADDR_USR_DMA_SRAM_WADDR_MASK       0xffffffff /* [31:0] 0b11111111111111111111111111111111 */

#define READ_DMA_USR_DMA_SRAM_WADDR_USR_DMA_SRAM_WADDR(base) \
    npu_reg_read_mask(base, REG_DMA_USR_DMA_SRAM_WADDR, DMA_USR_DMA_SRAM_WADDR_USR_DMA_SRAM_WADDR_MASK, DMA_USR_DMA_SRAM_WADDR_USR_DMA_SRAM_WADDR_OFFSET)
#define WRITE_DMA_USR_DMA_SRAM_WADDR_USR_DMA_SRAM_WADDR(base, val) \
    npu_reg_write_mask(base, REG_DMA_USR_DMA_SRAM_WADDR, val, DMA_USR_DMA_SRAM_WADDR_USR_DMA_SRAM_WADDR_MASK, DMA_USR_DMA_SRAM_WADDR_USR_DMA_SRAM_WADDR_OFFSET)

/* DMA.USR_DMA_RSIZE (Category: DMA) */
#define READ_DMA_USR_DMA_RSIZE(base) npu_reg_read(base, REG_DMA_USR_DMA_RSIZE)
#define WRITE_DMA_USR_DMA_RSIZE(base, val) npu_reg_write(base, REG_DMA_USR_DMA_RSIZE, val)
/* DMA.USR_DMA_RSIZE.USR_DMA_RSIZE (Category: DMA) */
#define DMA_USR_DMA_RSIZE_USR_DMA_RSIZE_LEN        22
#define DMA_USR_DMA_RSIZE_USR_DMA_RSIZE_OFFSET     0
#define DMA_USR_DMA_RSIZE_USR_DMA_RSIZE_MASK_BITS  0x003fffff /* [21:0] 0b00000000001111111111111111111111 */
#define DMA_USR_DMA_RSIZE_USR_DMA_RSIZE_MASK       0x003fffff /* [21:0] 0b00000000001111111111111111111111 */

#define READ_DMA_USR_DMA_RSIZE_USR_DMA_RSIZE(base) \
    npu_reg_read_mask(base, REG_DMA_USR_DMA_RSIZE, DMA_USR_DMA_RSIZE_USR_DMA_RSIZE_MASK, DMA_USR_DMA_RSIZE_USR_DMA_RSIZE_OFFSET)
#define WRITE_DMA_USR_DMA_RSIZE_USR_DMA_RSIZE(base, val) \
    npu_reg_write_mask(base, REG_DMA_USR_DMA_RSIZE, val, DMA_USR_DMA_RSIZE_USR_DMA_RSIZE_MASK, DMA_USR_DMA_RSIZE_USR_DMA_RSIZE_OFFSET)

/* DMA.USR_DMA_RSIZE.RESERVED0 (Category: DMA) */
#define DMA_USR_DMA_RSIZE_RESERVED0_LEN        10
#define DMA_USR_DMA_RSIZE_RESERVED0_OFFSET     22
#define DMA_USR_DMA_RSIZE_RESERVED0_MASK_BITS  0x000003ff /* [9:0] 0b00000000000000000000001111111111 */
#define DMA_USR_DMA_RSIZE_RESERVED0_MASK       0xffc00000 /* [31:22] 0b11111111110000000000000000000000 */

#define READ_DMA_USR_DMA_RSIZE_RESERVED0(base) \
    npu_reg_read_mask(base, REG_DMA_USR_DMA_RSIZE, DMA_USR_DMA_RSIZE_RESERVED0_MASK, DMA_USR_DMA_RSIZE_RESERVED0_OFFSET)
#define WRITE_DMA_USR_DMA_RSIZE_RESERVED0(base, val) \
    npu_reg_write_mask(base, REG_DMA_USR_DMA_RSIZE, val, DMA_USR_DMA_RSIZE_RESERVED0_MASK, DMA_USR_DMA_RSIZE_RESERVED0_OFFSET)

/* DMA.USR_DMA_WSIZE (Category: DMA) */
#define READ_DMA_USR_DMA_WSIZE(base) npu_reg_read(base, REG_DMA_USR_DMA_WSIZE)
#define WRITE_DMA_USR_DMA_WSIZE(base, val) npu_reg_write(base, REG_DMA_USR_DMA_WSIZE, val)
/* DMA.USR_DMA_WSIZE.USR_DMA_WSIZE (Category: DMA) */
#define DMA_USR_DMA_WSIZE_USR_DMA_WSIZE_LEN        22
#define DMA_USR_DMA_WSIZE_USR_DMA_WSIZE_OFFSET     0
#define DMA_USR_DMA_WSIZE_USR_DMA_WSIZE_MASK_BITS  0x003fffff /* [21:0] 0b00000000001111111111111111111111 */
#define DMA_USR_DMA_WSIZE_USR_DMA_WSIZE_MASK       0x003fffff /* [21:0] 0b00000000001111111111111111111111 */

#define READ_DMA_USR_DMA_WSIZE_USR_DMA_WSIZE(base) \
    npu_reg_read_mask(base, REG_DMA_USR_DMA_WSIZE, DMA_USR_DMA_WSIZE_USR_DMA_WSIZE_MASK, DMA_USR_DMA_WSIZE_USR_DMA_WSIZE_OFFSET)
#define WRITE_DMA_USR_DMA_WSIZE_USR_DMA_WSIZE(base, val) \
    npu_reg_write_mask(base, REG_DMA_USR_DMA_WSIZE, val, DMA_USR_DMA_WSIZE_USR_DMA_WSIZE_MASK, DMA_USR_DMA_WSIZE_USR_DMA_WSIZE_OFFSET)

/* DMA.USR_DMA_WSIZE.RESERVED0 (Category: DMA) */
#define DMA_USR_DMA_WSIZE_RESERVED0_LEN        10
#define DMA_USR_DMA_WSIZE_RESERVED0_OFFSET     22
#define DMA_USR_DMA_WSIZE_RESERVED0_MASK_BITS  0x000003ff /* [9:0] 0b00000000000000000000001111111111 */
#define DMA_USR_DMA_WSIZE_RESERVED0_MASK       0xffc00000 /* [31:22] 0b11111111110000000000000000000000 */

#define READ_DMA_USR_DMA_WSIZE_RESERVED0(base) \
    npu_reg_read_mask(base, REG_DMA_USR_DMA_WSIZE, DMA_USR_DMA_WSIZE_RESERVED0_MASK, DMA_USR_DMA_WSIZE_RESERVED0_OFFSET)
#define WRITE_DMA_USR_DMA_WSIZE_RESERVED0(base, val) \
    npu_reg_write_mask(base, REG_DMA_USR_DMA_WSIZE, val, DMA_USR_DMA_WSIZE_RESERVED0_MASK, DMA_USR_DMA_WSIZE_RESERVED0_OFFSET)

/* DMA.USR_SFR_ID (Category: DMA) */
#define READ_DMA_USR_SFR_ID(base) npu_reg_read(base, REG_DMA_USR_SFR_ID)
#define WRITE_DMA_USR_SFR_ID(base, val) npu_reg_write(base, REG_DMA_USR_SFR_ID, val)
/* DMA.USR_SFR_ID.USR_SFR_ID (Category: DMA) */
#define DMA_USR_SFR_ID_USR_SFR_ID_LEN        18
#define DMA_USR_SFR_ID_USR_SFR_ID_OFFSET     0
#define DMA_USR_SFR_ID_USR_SFR_ID_MASK_BITS  0x0003ffff /* [17:0] 0b00000000000000111111111111111111 */
#define DMA_USR_SFR_ID_USR_SFR_ID_MASK       0x0003ffff /* [17:0] 0b00000000000000111111111111111111 */

#define READ_DMA_USR_SFR_ID_USR_SFR_ID(base) \
    npu_reg_read_mask(base, REG_DMA_USR_SFR_ID, DMA_USR_SFR_ID_USR_SFR_ID_MASK, DMA_USR_SFR_ID_USR_SFR_ID_OFFSET)
#define WRITE_DMA_USR_SFR_ID_USR_SFR_ID(base, val) \
    npu_reg_write_mask(base, REG_DMA_USR_SFR_ID, val, DMA_USR_SFR_ID_USR_SFR_ID_MASK, DMA_USR_SFR_ID_USR_SFR_ID_OFFSET)

/* DMA.USR_SFR_ID.RESERVED0 (Category: DMA) */
#define DMA_USR_SFR_ID_RESERVED0_LEN        14
#define DMA_USR_SFR_ID_RESERVED0_OFFSET     18
#define DMA_USR_SFR_ID_RESERVED0_MASK_BITS  0x00003fff /* [13:0] 0b00000000000000000011111111111111 */
#define DMA_USR_SFR_ID_RESERVED0_MASK       0xfffc0000 /* [31:18] 0b11111111111111000000000000000000 */

#define READ_DMA_USR_SFR_ID_RESERVED0(base) \
    npu_reg_read_mask(base, REG_DMA_USR_SFR_ID, DMA_USR_SFR_ID_RESERVED0_MASK, DMA_USR_SFR_ID_RESERVED0_OFFSET)
#define WRITE_DMA_USR_SFR_ID_RESERVED0(base, val) \
    npu_reg_write_mask(base, REG_DMA_USR_SFR_ID, val, DMA_USR_SFR_ID_RESERVED0_MASK, DMA_USR_SFR_ID_RESERVED0_OFFSET)

/* DMA.USR_DMA_CMD (Category: DMA) */
#define READ_DMA_USR_DMA_CMD(base) npu_reg_read(base, REG_DMA_USR_DMA_CMD)
#define WRITE_DMA_USR_DMA_CMD(base, val) npu_reg_write(base, REG_DMA_USR_DMA_CMD, val)
/* DMA.USR_DMA_CMD.USR_RDMA_START (Category: DMA) */
#define DMA_USR_DMA_CMD_USR_RDMA_START_LEN        1
#define DMA_USR_DMA_CMD_USR_RDMA_START_OFFSET     0
#define DMA_USR_DMA_CMD_USR_RDMA_START_MASK_BITS  0x00000001 /* [0:0] 0b00000000000000000000000000000001 */
#define DMA_USR_DMA_CMD_USR_RDMA_START_MASK       0x00000001 /* [0:0] 0b00000000000000000000000000000001 */

#define READ_DMA_USR_DMA_CMD_USR_RDMA_START(base) \
    npu_reg_read_mask(base, REG_DMA_USR_DMA_CMD, DMA_USR_DMA_CMD_USR_RDMA_START_MASK, DMA_USR_DMA_CMD_USR_RDMA_START_OFFSET)
#define WRITE_DMA_USR_DMA_CMD_USR_RDMA_START(base, val) \
    npu_reg_write_mask(base, REG_DMA_USR_DMA_CMD, val, DMA_USR_DMA_CMD_USR_RDMA_START_MASK, DMA_USR_DMA_CMD_USR_RDMA_START_OFFSET)

/* DMA.USR_DMA_CMD.USR_WDMA_START (Category: DMA) */
#define DMA_USR_DMA_CMD_USR_WDMA_START_LEN        1
#define DMA_USR_DMA_CMD_USR_WDMA_START_OFFSET     1
#define DMA_USR_DMA_CMD_USR_WDMA_START_MASK_BITS  0x00000001 /* [0:0] 0b00000000000000000000000000000001 */
#define DMA_USR_DMA_CMD_USR_WDMA_START_MASK       0x00000002 /* [1:1] 0b00000000000000000000000000000010 */

#define READ_DMA_USR_DMA_CMD_USR_WDMA_START(base) \
    npu_reg_read_mask(base, REG_DMA_USR_DMA_CMD, DMA_USR_DMA_CMD_USR_WDMA_START_MASK, DMA_USR_DMA_CMD_USR_WDMA_START_OFFSET)
#define WRITE_DMA_USR_DMA_CMD_USR_WDMA_START(base, val) \
    npu_reg_write_mask(base, REG_DMA_USR_DMA_CMD, val, DMA_USR_DMA_CMD_USR_WDMA_START_MASK, DMA_USR_DMA_CMD_USR_WDMA_START_OFFSET)

/* DMA.USR_DMA_CMD.USR_CDMA_START (Category: DMA) */
#define DMA_USR_DMA_CMD_USR_CDMA_START_LEN        1
#define DMA_USR_DMA_CMD_USR_CDMA_START_OFFSET     2
#define DMA_USR_DMA_CMD_USR_CDMA_START_MASK_BITS  0x00000001 /* [0:0] 0b00000000000000000000000000000001 */
#define DMA_USR_DMA_CMD_USR_CDMA_START_MASK       0x00000004 /* [2:2] 0b00000000000000000000000000000100 */

#define READ_DMA_USR_DMA_CMD_USR_CDMA_START(base) \
    npu_reg_read_mask(base, REG_DMA_USR_DMA_CMD, DMA_USR_DMA_CMD_USR_CDMA_START_MASK, DMA_USR_DMA_CMD_USR_CDMA_START_OFFSET)
#define WRITE_DMA_USR_DMA_CMD_USR_CDMA_START(base, val) \
    npu_reg_write_mask(base, REG_DMA_USR_DMA_CMD, val, DMA_USR_DMA_CMD_USR_CDMA_START_MASK, DMA_USR_DMA_CMD_USR_CDMA_START_OFFSET)

/* DMA.USR_DMA_CMD.USR_SFR_START (Category: DMA) */
#define DMA_USR_DMA_CMD_USR_SFR_START_LEN        1
#define DMA_USR_DMA_CMD_USR_SFR_START_OFFSET     3
#define DMA_USR_DMA_CMD_USR_SFR_START_MASK_BITS  0x00000001 /* [0:0] 0b00000000000000000000000000000001 */
#define DMA_USR_DMA_CMD_USR_SFR_START_MASK       0x00000008 /* [3:3] 0b00000000000000000000000000001000 */

#define READ_DMA_USR_DMA_CMD_USR_SFR_START(base) \
    npu_reg_read_mask(base, REG_DMA_USR_DMA_CMD, DMA_USR_DMA_CMD_USR_SFR_START_MASK, DMA_USR_DMA_CMD_USR_SFR_START_OFFSET)
#define WRITE_DMA_USR_DMA_CMD_USR_SFR_START(base, val) \
    npu_reg_write_mask(base, REG_DMA_USR_DMA_CMD, val, DMA_USR_DMA_CMD_USR_SFR_START_MASK, DMA_USR_DMA_CMD_USR_SFR_START_OFFSET)

/* DMA.USR_DMA_CMD.RESERVED0 (Category: DMA) */
#define DMA_USR_DMA_CMD_RESERVED0_LEN        28
#define DMA_USR_DMA_CMD_RESERVED0_OFFSET     4
#define DMA_USR_DMA_CMD_RESERVED0_MASK_BITS  0x0fffffff /* [27:0] 0b00001111111111111111111111111111 */
#define DMA_USR_DMA_CMD_RESERVED0_MASK       0xfffffff0 /* [31:4] 0b11111111111111111111111111110000 */

#define READ_DMA_USR_DMA_CMD_RESERVED0(base) \
    npu_reg_read_mask(base, REG_DMA_USR_DMA_CMD, DMA_USR_DMA_CMD_RESERVED0_MASK, DMA_USR_DMA_CMD_RESERVED0_OFFSET)
#define WRITE_DMA_USR_DMA_CMD_RESERVED0(base, val) \
    npu_reg_write_mask(base, REG_DMA_USR_DMA_CMD, val, DMA_USR_DMA_CMD_RESERVED0_MASK, DMA_USR_DMA_CMD_RESERVED0_OFFSET)

/* DMA.USR_DMA_STATUS (Category: DMA) */
#define READ_DMA_USR_DMA_STATUS(base) npu_reg_read(base, REG_DMA_USR_DMA_STATUS)
#define WRITE_DMA_USR_DMA_STATUS(base, val) npu_reg_write(base, REG_DMA_USR_DMA_STATUS, val)
/* DMA.USR_DMA_STATUS.USR_RDMA_DONE (Category: DMA) */
#define DMA_USR_DMA_STATUS_USR_RDMA_DONE_LEN        1
#define DMA_USR_DMA_STATUS_USR_RDMA_DONE_OFFSET     0
#define DMA_USR_DMA_STATUS_USR_RDMA_DONE_MASK_BITS  0x00000001 /* [0:0] 0b00000000000000000000000000000001 */
#define DMA_USR_DMA_STATUS_USR_RDMA_DONE_MASK       0x00000001 /* [0:0] 0b00000000000000000000000000000001 */

#define READ_DMA_USR_DMA_STATUS_USR_RDMA_DONE(base) \
    npu_reg_read_mask(base, REG_DMA_USR_DMA_STATUS, DMA_USR_DMA_STATUS_USR_RDMA_DONE_MASK, DMA_USR_DMA_STATUS_USR_RDMA_DONE_OFFSET)
#define WRITE_DMA_USR_DMA_STATUS_USR_RDMA_DONE(base, val) \
    npu_reg_write_mask(base, REG_DMA_USR_DMA_STATUS, val, DMA_USR_DMA_STATUS_USR_RDMA_DONE_MASK, DMA_USR_DMA_STATUS_USR_RDMA_DONE_OFFSET)

/* DMA.USR_DMA_STATUS.USR_WDMA_DONE (Category: DMA) */
#define DMA_USR_DMA_STATUS_USR_WDMA_DONE_LEN        1
#define DMA_USR_DMA_STATUS_USR_WDMA_DONE_OFFSET     1
#define DMA_USR_DMA_STATUS_USR_WDMA_DONE_MASK_BITS  0x00000001 /* [0:0] 0b00000000000000000000000000000001 */
#define DMA_USR_DMA_STATUS_USR_WDMA_DONE_MASK       0x00000002 /* [1:1] 0b00000000000000000000000000000010 */

#define READ_DMA_USR_DMA_STATUS_USR_WDMA_DONE(base) \
    npu_reg_read_mask(base, REG_DMA_USR_DMA_STATUS, DMA_USR_DMA_STATUS_USR_WDMA_DONE_MASK, DMA_USR_DMA_STATUS_USR_WDMA_DONE_OFFSET)
#define WRITE_DMA_USR_DMA_STATUS_USR_WDMA_DONE(base, val) \
    npu_reg_write_mask(base, REG_DMA_USR_DMA_STATUS, val, DMA_USR_DMA_STATUS_USR_WDMA_DONE_MASK, DMA_USR_DMA_STATUS_USR_WDMA_DONE_OFFSET)

/* DMA.USR_DMA_STATUS.USR_CDMA_DONE (Category: DMA) */
#define DMA_USR_DMA_STATUS_USR_CDMA_DONE_LEN        1
#define DMA_USR_DMA_STATUS_USR_CDMA_DONE_OFFSET     2
#define DMA_USR_DMA_STATUS_USR_CDMA_DONE_MASK_BITS  0x00000001 /* [0:0] 0b00000000000000000000000000000001 */
#define DMA_USR_DMA_STATUS_USR_CDMA_DONE_MASK       0x00000004 /* [2:2] 0b00000000000000000000000000000100 */

#define READ_DMA_USR_DMA_STATUS_USR_CDMA_DONE(base) \
    npu_reg_read_mask(base, REG_DMA_USR_DMA_STATUS, DMA_USR_DMA_STATUS_USR_CDMA_DONE_MASK, DMA_USR_DMA_STATUS_USR_CDMA_DONE_OFFSET)
#define WRITE_DMA_USR_DMA_STATUS_USR_CDMA_DONE(base, val) \
    npu_reg_write_mask(base, REG_DMA_USR_DMA_STATUS, val, DMA_USR_DMA_STATUS_USR_CDMA_DONE_MASK, DMA_USR_DMA_STATUS_USR_CDMA_DONE_OFFSET)

/* DMA.USR_DMA_STATUS.USR_SFR_DONE (Category: DMA) */
#define DMA_USR_DMA_STATUS_USR_SFR_DONE_LEN        1
#define DMA_USR_DMA_STATUS_USR_SFR_DONE_OFFSET     3
#define DMA_USR_DMA_STATUS_USR_SFR_DONE_MASK_BITS  0x00000001 /* [0:0] 0b00000000000000000000000000000001 */
#define DMA_USR_DMA_STATUS_USR_SFR_DONE_MASK       0x00000008 /* [3:3] 0b00000000000000000000000000001000 */

#define READ_DMA_USR_DMA_STATUS_USR_SFR_DONE(base) \
    npu_reg_read_mask(base, REG_DMA_USR_DMA_STATUS, DMA_USR_DMA_STATUS_USR_SFR_DONE_MASK, DMA_USR_DMA_STATUS_USR_SFR_DONE_OFFSET)
#define WRITE_DMA_USR_DMA_STATUS_USR_SFR_DONE(base, val) \
    npu_reg_write_mask(base, REG_DMA_USR_DMA_STATUS, val, DMA_USR_DMA_STATUS_USR_SFR_DONE_MASK, DMA_USR_DMA_STATUS_USR_SFR_DONE_OFFSET)

/* DMA.USR_DMA_STATUS.RESERVED0 (Category: DMA) */
#define DMA_USR_DMA_STATUS_RESERVED0_LEN        28
#define DMA_USR_DMA_STATUS_RESERVED0_OFFSET     4
#define DMA_USR_DMA_STATUS_RESERVED0_MASK_BITS  0x0fffffff /* [27:0] 0b00001111111111111111111111111111 */
#define DMA_USR_DMA_STATUS_RESERVED0_MASK       0xfffffff0 /* [31:4] 0b11111111111111111111111111110000 */

#define READ_DMA_USR_DMA_STATUS_RESERVED0(base) \
    npu_reg_read_mask(base, REG_DMA_USR_DMA_STATUS, DMA_USR_DMA_STATUS_RESERVED0_MASK, DMA_USR_DMA_STATUS_RESERVED0_OFFSET)
#define WRITE_DMA_USR_DMA_STATUS_RESERVED0(base, val) \
    npu_reg_write_mask(base, REG_DMA_USR_DMA_STATUS, val, DMA_USR_DMA_STATUS_RESERVED0_MASK, DMA_USR_DMA_STATUS_RESERVED0_OFFSET)

/* DMA.VIRT_RD_INFO (Category: DMA) */
#define READ_DMA_VIRT_RD_INFO(base) npu_reg_read(base, REG_DMA_VIRT_RD_INFO)
#define WRITE_DMA_VIRT_RD_INFO(base, val) npu_reg_write(base, REG_DMA_VIRT_RD_INFO, val)
/* DMA.VIRT_RD_INFO.VIRT_RD_EN (Category: DMA) */
#define DMA_VIRT_RD_INFO_VIRT_RD_EN_LEN        1
#define DMA_VIRT_RD_INFO_VIRT_RD_EN_OFFSET     0
#define DMA_VIRT_RD_INFO_VIRT_RD_EN_MASK_BITS  0x00000001 /* [0:0] 0b00000000000000000000000000000001 */
#define DMA_VIRT_RD_INFO_VIRT_RD_EN_MASK       0x00000001 /* [0:0] 0b00000000000000000000000000000001 */

#define READ_DMA_VIRT_RD_INFO_VIRT_RD_EN(base) \
    npu_reg_read_mask(base, REG_DMA_VIRT_RD_INFO, DMA_VIRT_RD_INFO_VIRT_RD_EN_MASK, DMA_VIRT_RD_INFO_VIRT_RD_EN_OFFSET)
#define WRITE_DMA_VIRT_RD_INFO_VIRT_RD_EN(base, val) \
    npu_reg_write_mask(base, REG_DMA_VIRT_RD_INFO, val, DMA_VIRT_RD_INFO_VIRT_RD_EN_MASK, DMA_VIRT_RD_INFO_VIRT_RD_EN_OFFSET)

/* DMA.VIRT_RD_INFO.VIRT_RD_MODE (Category: DMA) */
#define DMA_VIRT_RD_INFO_VIRT_RD_MODE_LEN        1
#define DMA_VIRT_RD_INFO_VIRT_RD_MODE_OFFSET     1
#define DMA_VIRT_RD_INFO_VIRT_RD_MODE_MASK_BITS  0x00000001 /* [0:0] 0b00000000000000000000000000000001 */
#define DMA_VIRT_RD_INFO_VIRT_RD_MODE_MASK       0x00000002 /* [1:1] 0b00000000000000000000000000000010 */

#define READ_DMA_VIRT_RD_INFO_VIRT_RD_MODE(base) \
    npu_reg_read_mask(base, REG_DMA_VIRT_RD_INFO, DMA_VIRT_RD_INFO_VIRT_RD_MODE_MASK, DMA_VIRT_RD_INFO_VIRT_RD_MODE_OFFSET)
#define WRITE_DMA_VIRT_RD_INFO_VIRT_RD_MODE(base, val) \
    npu_reg_write_mask(base, REG_DMA_VIRT_RD_INFO, val, DMA_VIRT_RD_INFO_VIRT_RD_MODE_MASK, DMA_VIRT_RD_INFO_VIRT_RD_MODE_OFFSET)

/* DMA.VIRT_RD_INFO.RESERVED0 (Category: DMA) */
#define DMA_VIRT_RD_INFO_RESERVED0_LEN        30
#define DMA_VIRT_RD_INFO_RESERVED0_OFFSET     2
#define DMA_VIRT_RD_INFO_RESERVED0_MASK_BITS  0x3fffffff /* [29:0] 0b00111111111111111111111111111111 */
#define DMA_VIRT_RD_INFO_RESERVED0_MASK       0xfffffffc /* [31:2] 0b11111111111111111111111111111100 */

#define READ_DMA_VIRT_RD_INFO_RESERVED0(base) \
    npu_reg_read_mask(base, REG_DMA_VIRT_RD_INFO, DMA_VIRT_RD_INFO_RESERVED0_MASK, DMA_VIRT_RD_INFO_RESERVED0_OFFSET)
#define WRITE_DMA_VIRT_RD_INFO_RESERVED0(base, val) \
    npu_reg_write_mask(base, REG_DMA_VIRT_RD_INFO, val, DMA_VIRT_RD_INFO_RESERVED0_MASK, DMA_VIRT_RD_INFO_RESERVED0_OFFSET)

/* DMA.VIRT_RD_SEED (Category: DMA) */
#define READ_DMA_VIRT_RD_SEED(base) npu_reg_read(base, REG_DMA_VIRT_RD_SEED)
#define WRITE_DMA_VIRT_RD_SEED(base, val) npu_reg_write(base, REG_DMA_VIRT_RD_SEED, val)
/* DMA.VIRT_RD_SEED.VIRT_RD_SEED (Category: DMA) */
#define DMA_VIRT_RD_SEED_VIRT_RD_SEED_LEN        8
#define DMA_VIRT_RD_SEED_VIRT_RD_SEED_OFFSET     0
#define DMA_VIRT_RD_SEED_VIRT_RD_SEED_MASK_BITS  0x000000ff /* [7:0] 0b00000000000000000000000011111111 */
#define DMA_VIRT_RD_SEED_VIRT_RD_SEED_MASK       0x000000ff /* [7:0] 0b00000000000000000000000011111111 */

#define READ_DMA_VIRT_RD_SEED_VIRT_RD_SEED(base) \
    npu_reg_read_mask(base, REG_DMA_VIRT_RD_SEED, DMA_VIRT_RD_SEED_VIRT_RD_SEED_MASK, DMA_VIRT_RD_SEED_VIRT_RD_SEED_OFFSET)
#define WRITE_DMA_VIRT_RD_SEED_VIRT_RD_SEED(base, val) \
    npu_reg_write_mask(base, REG_DMA_VIRT_RD_SEED, val, DMA_VIRT_RD_SEED_VIRT_RD_SEED_MASK, DMA_VIRT_RD_SEED_VIRT_RD_SEED_OFFSET)

/* DMA.VIRT_RD_SEED.RESERVED0 (Category: DMA) */
#define DMA_VIRT_RD_SEED_RESERVED0_LEN        24
#define DMA_VIRT_RD_SEED_RESERVED0_OFFSET     8
#define DMA_VIRT_RD_SEED_RESERVED0_MASK_BITS  0x00ffffff /* [23:0] 0b00000000111111111111111111111111 */
#define DMA_VIRT_RD_SEED_RESERVED0_MASK       0xffffff00 /* [31:8] 0b11111111111111111111111100000000 */

#define READ_DMA_VIRT_RD_SEED_RESERVED0(base) \
    npu_reg_read_mask(base, REG_DMA_VIRT_RD_SEED, DMA_VIRT_RD_SEED_RESERVED0_MASK, DMA_VIRT_RD_SEED_RESERVED0_OFFSET)
#define WRITE_DMA_VIRT_RD_SEED_RESERVED0(base, val) \
    npu_reg_write_mask(base, REG_DMA_VIRT_RD_SEED, val, DMA_VIRT_RD_SEED_RESERVED0_MASK, DMA_VIRT_RD_SEED_RESERVED0_OFFSET)

/* DMA.VIRT_RD_PTRN (Category: DMA) */
#define READ_DMA_VIRT_RD_PTRN(base) npu_reg_read(base, REG_DMA_VIRT_RD_PTRN)
#define WRITE_DMA_VIRT_RD_PTRN(base, val) npu_reg_write(base, REG_DMA_VIRT_RD_PTRN, val)
/* DMA.VIRT_RD_PTRN.VIRT_RD_PTRN (Category: DMA) */
#define DMA_VIRT_RD_PTRN_VIRT_RD_PTRN_LEN        8
#define DMA_VIRT_RD_PTRN_VIRT_RD_PTRN_OFFSET     0
#define DMA_VIRT_RD_PTRN_VIRT_RD_PTRN_MASK_BITS  0x000000ff /* [7:0] 0b00000000000000000000000011111111 */
#define DMA_VIRT_RD_PTRN_VIRT_RD_PTRN_MASK       0x000000ff /* [7:0] 0b00000000000000000000000011111111 */

#define READ_DMA_VIRT_RD_PTRN_VIRT_RD_PTRN(base) \
    npu_reg_read_mask(base, REG_DMA_VIRT_RD_PTRN, DMA_VIRT_RD_PTRN_VIRT_RD_PTRN_MASK, DMA_VIRT_RD_PTRN_VIRT_RD_PTRN_OFFSET)
#define WRITE_DMA_VIRT_RD_PTRN_VIRT_RD_PTRN(base, val) \
    npu_reg_write_mask(base, REG_DMA_VIRT_RD_PTRN, val, DMA_VIRT_RD_PTRN_VIRT_RD_PTRN_MASK, DMA_VIRT_RD_PTRN_VIRT_RD_PTRN_OFFSET)

/* DMA.VIRT_RD_PTRN.RESERVED0 (Category: DMA) */
#define DMA_VIRT_RD_PTRN_RESERVED0_LEN        24
#define DMA_VIRT_RD_PTRN_RESERVED0_OFFSET     8
#define DMA_VIRT_RD_PTRN_RESERVED0_MASK_BITS  0x00ffffff /* [23:0] 0b00000000111111111111111111111111 */
#define DMA_VIRT_RD_PTRN_RESERVED0_MASK       0xffffff00 /* [31:8] 0b11111111111111111111111100000000 */

#define READ_DMA_VIRT_RD_PTRN_RESERVED0(base) \
    npu_reg_read_mask(base, REG_DMA_VIRT_RD_PTRN, DMA_VIRT_RD_PTRN_RESERVED0_MASK, DMA_VIRT_RD_PTRN_RESERVED0_OFFSET)
#define WRITE_DMA_VIRT_RD_PTRN_RESERVED0(base, val) \
    npu_reg_write_mask(base, REG_DMA_VIRT_RD_PTRN, val, DMA_VIRT_RD_PTRN_RESERVED0_MASK, DMA_VIRT_RD_PTRN_RESERVED0_OFFSET)

#endif // __NPU_REG_DMA_DX_V3_H
